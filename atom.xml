<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fan Wu</title>
  
  <subtitle>Life is Now.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-25T07:10:17.750Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wufan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Conda常用命令</title>
    <link href="http://yoursite.com/2018/04/25/Conda%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/04/25/Conda常用命令/</id>
    <published>2018-04-25T06:38:20.000Z</published>
    <updated>2018-04-25T07:10:17.750Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong>使用Anaconda管理python各种python环境和库，可以极大提高在不同项目切换的效率。<br><a id="more"></a></p><h2 id="帮助与版本"><a href="#帮助与版本" class="headerlink" title="帮助与版本"></a>帮助与版本</h2><ul><li><p>查看当前conda版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda -V</span><br><span class="line">conda -version</span><br></pre></td></tr></table></figure></li><li><p>更新conda</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda update conda</span><br><span class="line">conda update anaconda #更新anaconda</span><br></pre></td></tr></table></figure></li><li><p>某个命令的帮助信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install --help</span><br></pre></td></tr></table></figure></li></ul><h2 id="环境管理"><a href="#环境管理" class="headerlink" title="环境管理"></a>环境管理</h2><ul><li><p>查看当前环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info -e</span><br></pre></td></tr></table></figure></li><li><p>查看所有环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs</span><br><span class="line">conda env list</span><br></pre></td></tr></table></figure></li><li><p>创建新的环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">conda create --name environment_name</span><br><span class="line">#创建不同python版本的环境</span><br><span class="line">conda create --name environment_name python=3.6</span><br><span class="line">conda create --name environment_name python=2.7</span><br><span class="line">#创建时添加库的环境</span><br><span class="line">conda create --name environment_name numpy scipy</span><br></pre></td></tr></table></figure></li><li><p>切换环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#切换到新环境</span><br><span class="line">activate environment_name</span><br><span class="line">#退出环境</span><br><span class="line">deactivate environment_name</span><br></pre></td></tr></table></figure></li><li><p>移除环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove --name environment_name =-all</span><br></pre></td></tr></table></figure></li><li><p>复制某个环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name new_name --clone old_name</span><br></pre></td></tr></table></figure></li><li><p>保存环境配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env export &gt; environment.yml</span><br></pre></td></tr></table></figure></li><li><p>读取环境配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env create -f environment.yml</span><br></pre></td></tr></table></figure></li></ul><h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><ul><li><p>列举当前环境下所有包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda list</span><br></pre></td></tr></table></figure></li><li><p>列举某个环境下所有包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda list -n environment_name</span><br></pre></td></tr></table></figure></li><li><p>查找某个包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda search package_name</span><br></pre></td></tr></table></figure></li><li><p>为指定环境安装某个包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -n environment_name package_name</span><br></pre></td></tr></table></figure></li><li><p>更新包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda update package_name</span><br></pre></td></tr></table></figure></li><li><p>卸载包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove package_name</span><br></pre></td></tr></table></figure></li></ul><h2 id="设置镜像"><a href="#设置镜像" class="headerlink" title="设置镜像"></a>设置镜像</h2><p>访问国外资源网速较低时，可以考虑改变源，使用国内镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;使用Anaconda管理python各种python环境和库，可以极大提高在不同项目切换的效率。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="notes" scheme="http://yoursite.com/tags/notes/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>对抗攻击防御策略一览</title>
    <link href="http://yoursite.com/2018/04/17/%E5%AF%B9%E6%8A%97%E6%94%BB%E5%87%BB%E9%98%B2%E5%BE%A1%E7%AD%96%E7%95%A5%E4%B8%80%E8%A7%88/"/>
    <id>http://yoursite.com/2018/04/17/对抗攻击防御策略一览/</id>
    <published>2018-04-17T07:46:27.000Z</published>
    <updated>2018-04-24T07:45:40.023Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong>：根据最近的学习，按照自己的理解给不同对抗攻击的防御方法作简单总结。对抗防御从形式上看可以被分为三类：①对抗样本检测；②改变对抗样本；③增强模型。<br><a id="more"></a></p><hr><h2 id="①对抗样本检测："><a href="#①对抗样本检测：" class="headerlink" title="①对抗样本检测："></a>①对抗样本检测：</h2><p>指根据对抗样本与原始样本的分布差异，在模型Inference阶段将对抗样本区分出来。</p><p>检测对抗样本的方法有：</p><h3 id="1）-基于统计检验的检测（Sample-statistic）："><a href="#1）-基于统计检验的检测（Sample-statistic）：" class="headerlink" title="1）    基于统计检验的检测（Sample statistic）："></a>1）    基于统计检验的检测（Sample statistic）：</h3><p>这种方法比较直接，效果也比较差，并且因为是基于大量对抗样本的统计结论，因此需要大量对抗样本挖掘其统计规律，在检测的时候也不适于检测单个对抗样本。常见的统计检验方法如下：<br><strong>A．    Maximum mean discrepancy and energy distance.</strong><br>【Kathrin Grosse, Praveen Manoharan, Nicolas Papernot, Michael Backes, and Patrick McDaniel. On the (Statistical) Detection of Adversarial Examples. arXiv preprint arXiv:1702.06280, 2017.】<br>    但是这种方法不能对单个样本作出预测，只能揭示对抗样本与原始样本在平均偏差和距离的差异，不具有检测对抗样本的可行性。<br><strong>B．    Kernel density estimation</strong><br>【Reuben Feinman, Ryan R Curtin, Saurabh Shintre, and Andrew B Gardner. Detecting Adversarial Samples from Artifacts. arXiv preprint arXiv:1703.00410, 2017.】<br>这种方法即是在折叠的空间中计算一个测试样本和所有初始样本的距离，根据数据特征降维之后的差异区分对抗样本和真实样本。这种方法的缺陷是需要很大的计算资源，并且只能检测出对抗攻击时添加的对抗扰动比较大，让对抗样本和原始样本差异比较大的情况。<br><strong>C.    输入特征差异：</strong>包括JSMA攻击的论文中提到的，利用相邻像素间的平方差检测对抗样本。（这个方法前面的讨论中提到过，缺乏直观的合理性，所以也没什么价值）</p><h3 id="2）-训练检测器（Detector）："><a href="#2）-训练检测器（Detector）：" class="headerlink" title="2）    训练检测器（Detector）："></a>2）    训练检测器（Detector）：</h3><p>将对抗样本和原始样本作为训练集进行监督训练。<br>而检测器的训练包括两种：<br><strong>一种</strong>是直接将对抗样本和原始样本，打上label作为训练集训练一个分类器；<br><strong>另一种</strong>是将原始数据和对抗样本数据通过原始分类模型后，在输出层的值（或某一层神经网络层的输出值）打上label作为训练集训练一个分类器。</p><h3 id="3）-预测结果差异（Prediction-Inconsistency）"><a href="#3）-预测结果差异（Prediction-Inconsistency）" class="headerlink" title="3）    预测结果差异（Prediction Inconsistency）"></a>3）    预测结果差异（Prediction Inconsistency）</h3><p>根据预测结果差异来检测对抗样本主要有三种：<br><strong>(1)对抗样本和正常样本在原始模型的输出层差异。</strong><br>利用这种差异来检测对抗样本和原始样本，需要利用第2）点中构建一个检测器来实现；或者像我们前面的工作——根据模型输出层的统计差异来区分，但是这种方法不能对单个对抗样本做出判断。<br><strong>(2)对抗样本和原始样本经过特征处理之后，他们在输出层的变化不同。</strong><br>这种方法在前面的报告中提到了，这部分内容在后面的部分详细给出。<br><strong>(3)对抗样本在不同的模型下输出差异。</strong><br>这部分内容和前面和老师讨论的依据Byzantine Generals problem来设计系统相关联，让对抗样本经过多个分类模型，按照3t+1的原则，保证分类输出的正常。<br>其中，不同的模型获得方式有很多，一种是其他能应用于同一个任务的分类模型，比如在用VGG16分类时，用ResNet，WRN，DenseNet等同样能用作分类的网络模型作为参照，检测出对抗样本。另外一种就是基于原始模型的修改，包括结构的修改和训练过程的修改，不同的修改过程可以得到不同的子模型。比如在训练过程中，每次训练采用不同的dropout策略，可以得到几个类似功能的分类模型，只要测试样本在这几个分类模型上满足拜占庭问题的解，就可以判断为是原始样本。</p><hr><h2 id="②改变对抗样本："><a href="#②改变对抗样本：" class="headerlink" title="②改变对抗样本："></a>②改变对抗样本：</h2><p>1）用对抗攻击的方法处理对抗样本，让对抗样本重新被分类准确。<br>2）用特征处理的方法处理对抗样本，让对抗样本重新被分类准确。<br>3) Denoise the adversarial perturbation</p><hr><h2 id="③增强模型："><a href="#③增强模型：" class="headerlink" title="③增强模型："></a>③增强模型：</h2><p>1）    用更多数据训练，增强模型的泛化能力。包括对抗训练。<br>2）    修改模型的激活函数或者损失函数。<br>3）    使用network add-on，包括利用GAN，Defensive distillation。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;：根据最近的学习，按照自己的理解给不同对抗攻击的防御方法作简单总结。对抗防御从形式上看可以被分为三类：①对抗样本检测；②改变对抗样本；③增强模型。&lt;br&gt;
    
    </summary>
    
      <category term="paper" scheme="http://yoursite.com/categories/paper/"/>
    
    
      <category term="secure" scheme="http://yoursite.com/tags/secure/"/>
    
      <category term="papernotes" scheme="http://yoursite.com/tags/papernotes/"/>
    
  </entry>
  
  <entry>
    <title>Academic Writing Lessons</title>
    <link href="http://yoursite.com/2018/03/30/Academic%20Writing%20Lessons/"/>
    <id>http://yoursite.com/2018/03/30/Academic Writing Lessons/</id>
    <published>2018-03-30T15:48:00.000Z</published>
    <updated>2018-03-30T15:56:27.326Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Academic Writing Lessons</strong><br><img src="http://img5.imgtn.bdimg.com/it/u=3049519364,3036431551&amp;fm=200&amp;gp=0.jpg" alt="此处输入图片的描述"></p><a id="more"></a><hr><h2 id="Use-Better-alternative-words"><a href="#Use-Better-alternative-words" class="headerlink" title="Use Better alternative words"></a>Use Better alternative words</h2><table><thead><tr><th>Original</th><th style="text-align:center">Better alternative</th></tr></thead><tbody><tr><td>consider</td><td style="text-align:center">evaluate,assess</td></tr><tr><td>check</td><td style="text-align:center">verify,confirm</td></tr><tr><td>different</td><td style="text-align:center">distinct,diverse,various,varied</td></tr><tr><td>little/few</td><td style="text-align:center">seldom,slightly</td></tr><tr><td>problem</td><td style="text-align:center">limitaion,restriction,obstacle,hindrance</td></tr><tr><td>need</td><td style="text-align:center">require,stipulate</td></tr><tr><td>affect</td><td style="text-align:center">influence,shape</td></tr><tr><td>carry out</td><td style="text-align:center">implement,execute,primulgate,conduct</td></tr><tr><td>change</td><td style="text-align:center">modify,adjust,alter,vary</td></tr><tr><td>complicated</td><td style="text-align:center">complex,cumbersome,intricate</td></tr><tr><td>correct/incorrect</td><td style="text-align:center">precise/imprecise,accurate/inaccurate</td></tr><tr><td>find</td><td style="text-align:center">determine,derive,attain,locate,identify</td></tr><tr><td>help</td><td style="text-align:center">assist,facilitate,guide,direct</td></tr><tr><td>important</td><td style="text-align:center">critical,crucial,essential,pertinent,relevant,significant,vital</td></tr><tr><td>improve</td><td style="text-align:center">enhance,upgrade,elevate</td></tr><tr><td>is made of</td><td style="text-align:center">consists of,comprises,is composed of</td></tr><tr><td>make clear</td><td style="text-align:center">elucidate,clarify</td></tr><tr><td>makesure</td><td style="text-align:center">ensure,assure</td></tr><tr><td>meet</td><td style="text-align:center">satisfy,fulfill,adhere to</td></tr><tr><td>much/strongly</td><td style="text-align:center">markedly,considerably,substantially</td></tr><tr><td>realize</td><td style="text-align:center">comprehend,preceive,understand</td></tr><tr><td>solve</td><td style="text-align:center">alleviate,modify,resolve,eliminate,eradicate</td></tr><tr><td>suitable</td><td style="text-align:center">appropriate,adequate</td></tr><tr><td>tries</td><td style="text-align:center">attempts,aims,aspires</td></tr><tr><td>usually</td><td style="text-align:center">normally,typically,generally</td></tr><tr><td>very</td><td style="text-align:center">highly,rather,quite,extremely</td></tr><tr><td>way</td><td style="text-align:center">method,means,approach,strategy</td></tr><tr><td>whole</td><td style="text-align:center">complete,entire,comprehensive</td></tr><tr><td>is found to be</td><td style="text-align:center">is</td></tr><tr><td>is capable of</td><td style="text-align:center">can</td></tr><tr><td>is view of the fact that</td><td style="text-align:center">because</td></tr><tr><td>in this case</td><td style="text-align:center">here</td></tr><tr><td>in some cases</td><td style="text-align:center">occasionally</td></tr><tr><td>in no case</td><td style="text-align:center">never</td></tr><tr><td>the question as to</td><td style="text-align:center">whether</td></tr><tr><td>subsequent to</td><td style="text-align:center">after,following</td></tr><tr><td>serves the function of</td><td style="text-align:center">is</td></tr><tr><td>reach a conclusion</td><td style="text-align:center">is</td></tr><tr><td>put an end to</td><td style="text-align:center">end</td></tr><tr><td>provided that</td><td style="text-align:center">if</td></tr><tr><td>come to a conclusion</td><td style="text-align:center">conclude</td></tr><tr><td>by means of</td><td style="text-align:center">by</td></tr><tr><td>in a position to</td><td style="text-align:center">can</td></tr><tr><td>be deficient in</td><td style="text-align:center">lack</td></tr><tr><td>at this point in time</td><td style="text-align:center">now</td></tr><tr><td>at the present time</td><td style="text-align:center">now</td></tr><tr><td>notwithstanding the fact that</td><td style="text-align:center">although</td></tr><tr><td>manner in which</td><td style="text-align:center">how</td></tr><tr><td>make inquiry regrading</td><td style="text-align:center">ask about,inquire about</td></tr><tr><td>it is possible that</td><td style="text-align:center">may,might,could,can</td></tr><tr><td>in most cases</td><td style="text-align:center">uaually</td></tr><tr><td>in many cases</td><td style="text-align:center">often</td></tr><tr><td>in large measure</td><td style="text-align:center">largely</td></tr><tr><td>is in excess of</td><td style="text-align:center">exceeds,surpasses</td></tr><tr><td>in proximity to</td><td style="text-align:center">near</td></tr><tr><td>in case</td><td style="text-align:center">if</td></tr><tr><td>in all cases</td><td style="text-align:center">always</td></tr><tr><td>a number of</td><td style="text-align:center">several,many,numerous</td></tr><tr><td>if conditions are such that</td><td style="text-align:center">if</td></tr><tr><td>happens to be</td><td style="text-align:center">am,is,are</td></tr><tr><td>give indication of</td><td style="text-align:center">indicate,suggest</td></tr><tr><td>give consideration to</td><td style="text-align:center">consider</td></tr><tr><td>for this reason</td><td style="text-align:center">because</td></tr><tr><td>for the reason that</td><td style="text-align:center">so</td></tr><tr><td>for the purpose of</td><td style="text-align:center">for/to</td></tr><tr><td>during the time that</td><td style="text-align:center">while</td></tr><tr><td>due to the fact that</td><td style="text-align:center">because</td></tr><tr><td>despite the fact that</td><td style="text-align:center">althought</td></tr><tr><td>at such time as</td><td style="text-align:center">when</td></tr><tr><td>ascertain the location of</td><td style="text-align:center">find</td></tr><tr><td>along the lines of</td><td style="text-align:center">such as</td></tr><tr><td>a majority of</td><td style="text-align:center">most</td></tr></tbody></table><hr><h2 id="Formal-Grammer-and-Style"><a href="#Formal-Grammer-and-Style" class="headerlink" title="Formal Grammer and Style"></a>Formal Grammer and Style</h2><ol><li><p>Avoid contracion</p><pre><code>Export figures will not improve until the economy is stronger.Export figures won&apos;t improve until the economy is stronger.</code></pre></li><li><p>Use the more appropriate formal negative forms.</p><pre><code>not...much -&gt; littlenot...any -&gt; nonot...many -&gt; few</code></pre></li><li><p>Limit the use of “run on” expressions, such as “and so forth” and “etc.”</p><pre><code>These semiconductors can be used in robots, CD players, etc. —&gt;These semiconductors can be used in robots, CD players, and other electronic devices.</code></pre></li><li><p>Avoid addressing the reader as “you”</p><pre><code>You can see the results in Table 1.The results can be seen in Table 1.</code></pre></li><li><p>Limit the use of direct questions.</p><pre><code>Instead, use &quot;we now need to consider...&quot;</code></pre></li><li><p>Place adverbs within the verb.</p><pre><code>Then the solution can be discarded.The solution can then be discarded.The blood is withdraw slowly.The blood is slowly withdraw.</code></pre></li><li>Do not be wordy.</li></ol><p><strong>(To be continued…)</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Academic Writing Lessons&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://img5.imgtn.bdimg.com/it/u=3049519364,3036431551&amp;amp;fm=200&amp;amp;gp=0.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="english" scheme="http://yoursite.com/categories/english/"/>
    
    
      <category term="paper" scheme="http://yoursite.com/tags/paper/"/>
    
      <category term="notes" scheme="http://yoursite.com/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>python函数式编程</title>
    <link href="http://yoursite.com/2018/03/29/python%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/03/29/python函数式编程/</id>
    <published>2018-03-29T15:48:42.000Z</published>
    <updated>2018-03-30T15:59:05.213Z</updated>
    
    <content type="html"><![CDATA[<p><strong>python函数式编程</strong><br><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1522348726856&amp;di=94ad6fe367916649eef70bb9303a9537&amp;imgtype=0&amp;src=http://file.digitaling.com/eImg/image/20140113/20140113145051_79090.jpg" alt="此处输入图片的描述"></p><a id="more"></a><hr><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a><font color="red">高阶函数</font></h2><h3 id="map-和reduce"><a href="#map-和reduce" class="headerlink" title="map()和reduce()"></a>map()和reduce()</h3><p>参考<a href="https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/mapreduce-osdi04.pdf" target="_blank" rel="noopener">论文</a><br><strong>map():</strong> 这个函数接收两个参数，一个是<strong>函数</strong>，一个是<strong>Iterable</strong>（可迭代对象），map将传入的函数$f(x)$依次作用到序列的每个元素上，并把结果作为新的<strong>Iterator</strong>（迭代器）返回。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#实现将一个数字序列转化成字符序列</span><br><span class="line">list(map(str,[1,2,3,4,5]))</span><br></pre></td></tr></table></figure></p><p><strong>reduce()</strong>: 把一个函数作用在一个序列[x1, x2, x3, …]上，这个<strong>函数必须接收两个参数$f(x,y)$</strong>，reduce把结果继续和序列的下一个元素做累积计算。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#对一个序列求和</span><br><span class="line">&gt;&gt;&gt; from functools import reduce</span><br><span class="line">&gt;&gt;&gt; def add(x, y):</span><br><span class="line">...     return x + y</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; reduce(add, [1, 3, 5, 7, 9])</span><br><span class="line">25</span><br></pre></td></tr></table></figure></p><h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><p>用于过滤序列，和map()类似，<strong>filter()</strong>也接收一个函数和一个序列。<br>和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是<strong>True还是False</strong>决定保留还是丢弃该元素。返回一个<strong>Iterator</strong>（这说明返回的依旧是一个惰性序列）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删掉一个序列中的空字符串</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">注意filter()给函数默认加bool()修正</span></span><br><span class="line"><span class="string">比如：</span></span><br><span class="line"><span class="string">bool(" a")=True</span></span><br><span class="line"><span class="string">bool("  ")=True</span></span><br><span class="line"><span class="string">bool("  ".Strip())=False</span></span><br><span class="line"><span class="string">bool(None)=False</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_empty</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> s <span class="keyword">and</span> s.strip()</span><br><span class="line">list(filter(not_empty, [<span class="string">'A'</span>, <span class="string">''</span>, <span class="string">'B'</span>, <span class="keyword">None</span>, <span class="string">'C'</span>, <span class="string">'  '</span>]))</span><br><span class="line"><span class="comment"># 结果: ['A', 'B', 'C']</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#用filter()求素数的方法——埃氏筛法</span><br><span class="line">#定义一个筛选函数</span><br><span class="line">def _not_divisible(n):</span><br><span class="line">    return lambda x: x % n &gt; 0</span><br><span class="line">#初始化自然数序列</span><br><span class="line">def _iter():</span><br><span class="line">    n = 1</span><br><span class="line">    while True:</span><br><span class="line">        n = n + 2</span><br><span class="line">        yield n</span><br><span class="line">def primes():</span><br><span class="line">    yield 2</span><br><span class="line">    it = _iter()</span><br><span class="line">    while True:</span><br><span class="line">        n = next(it)</span><br><span class="line">        yield n</span><br><span class="line">        it = filter(_not_divisible(n), it)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">def _iter():</span></span><br><span class="line"><span class="string">    n = 1</span></span><br><span class="line"><span class="string">    while True:</span></span><br><span class="line"><span class="string">        yield n</span></span><br><span class="line"><span class="string">        n = n + 1</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_palindrome</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> str(n) == str(n)[::<span class="number">-1</span>]</span><br><span class="line">list(filter(is_palindrome),range(<span class="number">1000</span>))</span><br></pre></td></tr></table></figure><h3 id="sorted"><a href="#sorted" class="headerlink" title="sorted()"></a>sorted()</h3><p>可以实现对list进行排序。<br>同时，可以接受一个key <strong>函数</strong>来实现自定义排序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; sorted([36, 5, -12, 9, -21], key=abs)</span><br><span class="line">[5, 9, -12, -21, 36]</span><br></pre></td></tr></table></figure></p><p>key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>])</span><br><span class="line">[<span class="string">'Credit'</span>, <span class="string">'Zoo'</span>, <span class="string">'about'</span>, <span class="string">'bob'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>], key=str.lower)</span><br><span class="line">[<span class="string">'about'</span>, <span class="string">'bob'</span>, <span class="string">'Credit'</span>, <span class="string">'Zoo'</span>]</span><br></pre></td></tr></table></figure></p><hr><h2 id="返回函数"><a href="#返回函数" class="headerlink" title="返回函数"></a><font color="red">返回函数</font></h2><p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span><span class="params">(*args)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">()</span>:</span></span><br><span class="line">        ax = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">            ax = ax + n</span><br><span class="line">        <span class="keyword">return</span> ax</span><br><span class="line">    <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure></p><p>&hearts;&hearts;&hearts;&hearts; <strong><font color="red">闭包</font></strong>&hearts;&hearts;&hearts;&hearts;<br>建议参考教程——<a href="https://zhuanlan.zhihu.com/p/22229197" target="_blank" rel="noopener">知乎专栏</a><br><strong>闭包概念</strong>：在一个内部函数中，对外部作用域的变量进行引用，(并且一般外部函数的返回值为内部函数)，那么内部函数就被认为是闭包。<br>&emsp;在函数lazy_sum中又定义了函数sum，并且，内部函数sum可以引用外部函数lazy_sum的参数和局部变量，当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，这称为“闭包（Closure）”的程序结构。<br>&emsp;需要<strong>注意的问题</strong>是，循环在python中没有域的概念，向列表中添加函数的时候并不会保存循环中变量的值。<font color="blue"><strong>返回的函数并没有立刻执行，而是直到调用了f()才执行。</strong></font><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def count():</span><br><span class="line">    fs = []</span><br><span class="line">    for i in range(1, 4):</span><br><span class="line">        def f():</span><br><span class="line">             return i*i</span><br><span class="line">        fs.append(f)</span><br><span class="line">    return fs</span><br><span class="line"></span><br><span class="line">f1, f2, f3 = count()</span><br></pre></td></tr></table></figure></p><p>你可能认为调用f1()，f2()和f3()结果应该是1，4，9，但实际结果是：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1()</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2()</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f3()</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure></p><p><font color="red">返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。</font><br><strong>原因</strong>：闭包函数调用外部循环变量时，并没有保存这个值，只保存了变量的地址，要等到调用闭包函数时才会取具体的值，然而此时函数值可能已经发生了变化。<br><strong>解决办法</strong>：再定义一个函数，将g()形成闭包。主要是要在函数内部，把可变的循环值i作为函数参数调用。简单来说，一定要有f(i),在调用过程中，i就会被传入。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def count():</span><br><span class="line">    def f(j):</span><br><span class="line">        def g():</span><br><span class="line">            return j*j</span><br><span class="line">        return g</span><br><span class="line">    fs = []</span><br><span class="line">    for i in range(1, 4):</span><br><span class="line">        fs.append(f(i)) # f(i)立刻被执行，因此i的当前值被传入f()</span><br><span class="line">    return fs</span><br></pre></td></tr></table></figure></p><p>利用闭包返回一个计数器函数，每次调用它返回递增整数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def createCounter()</span><br><span class="line">    s=[0]</span><br><span class="line">    def conter():</span><br><span class="line">        s[0] += 1</span><br><span class="line">        return s[0]</span><br><span class="line"></span><br><span class="line">    return counter</span><br></pre></td></tr></table></figure></p><p><strong><a href="https://www.cnblogs.com/Lin-Yi/p/7305364.html" target="_blank" rel="noopener">外函数返回了内函数的引用</a>：</strong>当我们在python中定义一个函数def demo():  的时候，内存当中会开辟一些空间，存下这个函数的代码、内部的局部变量等等。这个demo只不过是一个变量名字，它里面存了这个函数所在位置的引用而已。我们还可以进行x = demo， y = demo， 这样的操作就相当于，把demo里存的东西赋值给x和y，这样x 和y 都指向了demo函数所在的引用，在这之后我们可以用x() 或者 y() 来调用我们自己创建的demo() ，调用的实际上根本就是一个函数，x、y和demo三个变量名存了同一个函数的引用。</p><p><strong>闭包中内函数修改外函数局部变量：</strong></p><p>  在闭包内函数中，我们可以随意使用外函数绑定来的临时变量，但是如果我们想修改外函数临时变量数值的时候发现出问题了！<br>  在基本的python语法当中，一个函数可以随意读取全局数据，但是要修改全局数据的时候有两种方法:1 global 声明全局变量 2 全局变量是可变类型数据的时候可以修改<br>  在闭包内函数也是类似的情况。在内函数中想修改闭包变量（外函数绑定给内函数的局部变量）的时候：</p><ol><li>在python3中，可以用nonlocal 关键字声明 一个变量， 表示这个变量不是局部变量空间的变量，需要向上一层变量空间找这个变量。</li><li>在python2中，没有nonlocal这个关键字，我们可以把闭包变量改成可变类型数据进行修改，比如列表。</li></ol><p><strong>闭包的作用：</strong></p><ol><li>装饰器！！！装饰器是做什么的？？其中一个应用就是，我们工作中写了一个登录功能，我们想统计这个功能执行花了多长时间，我们可以用装饰器装饰这个登录模块，装饰器帮我们完成登录函数执行之前和之后取时间。</li><li>面向对象！！！经历了上面的分析，我们发现外函数的临时变量送给了内函数。大家回想一下类对象的情况，对象有好多类似的属性和方法，所以我们创建类，用类创建出来的对象都具有相同的属性方法。闭包也是实现面向对象的方法之一。在python当中虽然我们不这样用，在其他编程语言入比如avaScript中，经常用闭包来实现面向对象编程</li><li>实现单利模式！！</li><li>闭包可以保存当前的运行环境，以一个类似棋盘游戏的例子来说明。假设棋盘大小为50*50，左上角为坐标系原点(0,0)，我需要一个函数，接收2个参数，分别为方向(direction)，步长(step)，该函数控制棋子的运动。 这里需要说明的是，每次运动的起点都是上次运动结束的终点。</li></ol><hr><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a><font color="red">匿名函数</font></h2><p>在传入函数时，有些时候，不需要显式地定义函数，直接传入匿名函数更方便。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(<span class="keyword">lambda</span> x: x * x, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]))</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">其中，lambda x: x * x相当于：</span></span><br><span class="line"><span class="string">def f(x):</span></span><br><span class="line"><span class="string">    return x * x</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>同时，匿名函数可以作为返回函数。</p><hr><h2 id="装饰器（decorator）"><a href="#装饰器（decorator）" class="headerlink" title="装饰器（decorator）"></a><font color="red">装饰器（decorator）</font></h2><p><strong>装饰器就是一个返回函数的高阶函数，基于闭包原理。</strong><br>定义一个打印日志的decorator:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        print(<span class="string">'call %s():'</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure></p><p>定义一个带参数的decorator:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">            print(<span class="string">'%s %s():'</span> % (text, func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure></p><p>函数也是对象，它有<strong>name</strong>等属性，但你去看经过decorator装饰之后的函数，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'2015-3-25'</span>)</span><br></pre></td></tr></table></figure></p><p>它们的<strong>name</strong>已经从原来的’now’变成了’wrapper’：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>now.__name__</span><br><span class="line"><span class="string">'wrapper'</span></span><br></pre></td></tr></table></figure></p><p>因为返回的那个wrapper()函数名字就是’wrapper’，所以，需要把原始函数的__name__等属性复制到wrapper()函数中，否则，有些依赖函数签名的代码执行就会出错。</p><p>不需要编写wrapper.__name__ = func.__name__这样的代码，Python内置的<font color="red"><strong>functools.wraps</strong></font>就是干这个事的，所以，一个完整的decorator的写法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import functools</span><br><span class="line"></span><br><span class="line">def log(func):</span><br><span class="line">    @functools.wraps(func)#复制依赖函数</span><br><span class="line">    def wrapper(*args, **kw):</span><br><span class="line">        print(&apos;call %s():&apos; % func.__name__)</span><br><span class="line">        return func(*args, **kw)</span><br><span class="line">    return wrapper</span><br></pre></td></tr></table></figure></p><hr><h2 id="偏函数（Partial-function）"><a href="#偏函数（Partial-function）" class="headerlink" title="偏函数（Partial function）"></a><font color="red">偏函数（Partial function）</font></h2><p><strong>偏函数可以通过设定参数的默认值，降低函数调用的难度。由Python的functools模块提供。</strong><br>举例说明：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> functools</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2 = functools.partial(int, base=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1000000'</span>)</span><br><span class="line"><span class="number">64</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1010101'</span>)</span><br><span class="line"><span class="number">85</span></span><br></pre></td></tr></table></figure></p><p>上面的新的int2函数，仅仅是把base参数重新设定默认值为2，但也可以在函数调用时传入其他值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; int2(&apos;1000000&apos;, base=10)</span><br><span class="line">1000000</span><br></pre></td></tr></table></figure></p><p>创建偏函数时，实际上可以接收函数对象、*args和**kw这3个参数，当传入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int2 = functools.partial(int, base=2)</span><br><span class="line">#相当于</span><br><span class="line">kw = &#123; &apos;base&apos;: 2 &#125;</span><br><span class="line">int(&apos;10010&apos;, **kw)</span><br></pre></td></tr></table></figure></p><hr><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><font color="red">Reference</font></h2><p><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431843456408652233b88b424613aa8ec2fe032fd85a000" target="_blank" rel="noopener">教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;python函数式编程&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1522348726856&amp;amp;di=94ad6fe367916649eef70bb9303a9537&amp;amp;imgtype=0&amp;amp;src=http://file.digitaling.com/eImg/image/20140113/20140113145051_79090.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="coding" scheme="http://yoursite.com/categories/coding/"/>
    
    
      <category term="notes" scheme="http://yoursite.com/tags/notes/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python可变与不可变对象</title>
    <link href="http://yoursite.com/2018/03/19/python%E5%8F%AF%E5%8F%98%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2018/03/19/python可变与不可变对象/</id>
    <published>2018-03-19T15:17:20.000Z</published>
    <updated>2018-04-12T11:39:07.408Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Abstract</strong>：介绍python中的可变对象与不可变对象的概念。<br><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1522348726856&amp;di=94ad6fe367916649eef70bb9303a9537&amp;imgtype=0&amp;src=http://file.digitaling.com/eImg/image/20140113/20140113145051_79090.jpg" alt="此处输入图片的描述"><br><a id="more"></a></p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li><strong>不可变对象</strong>，该对象所指向的内存中的值不能被改变。当改变某个变量时候，由于其所指的值不能被改变，相当于把原来的值复制一份后再改变，这会开辟一个新的地址，变量再指向这个新的地址。</li><li><strong>可变对象</strong>，该对象所指向的内存中的值可以被改变。变量（准确的说是引用）改变后，实际上是其所指的值直接发生改变，并没有发生复制行为，也没有开辟新的出地址，通俗点说就是原地改变。</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul><li><p>不可变（immutable）：int、字符串(string)、float、（数值型number）、<strong>元组（tuple)</strong></p></li><li><p>可变（mutable）：字典型(dictionary)、列表型(list)、集合（set）</p></li></ul><h2 id="定义默认参数要牢记"><a href="#定义默认参数要牢记" class="headerlink" title="定义默认参数要牢记"></a><font color="red">定义默认参数要牢记</font></h2><p>默认参数必须指向<strong>不变对象</strong>！<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=[])</span>:</span></span><br><span class="line">    L.append(<span class="string">'END'</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</span><br><span class="line">[<span class="string">'END'</span>, <span class="string">'END'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</span><br><span class="line">[<span class="string">'END'</span>, <span class="string">'END'</span>, <span class="string">'END'</span>]</span><br></pre></td></tr></table></figure></p><p>Python函数在定义的时候，默认参数L的值就被计算出来了，即[]，因为默认参数L<strong>也是一个变量</strong>，它指向对象[]，每次调用该函数，如果改变了L的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的[]了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> L <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        L = []</span><br><span class="line">    L.append(<span class="string">'END'</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</span><br><span class="line">[<span class="string">'END'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</span><br><span class="line">[<span class="string">'END'</span>]</span><br></pre></td></tr></table></figure></p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">2278158310408</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a += [<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">2278158310408</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">4</span> <span class="comment">#不可变</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">1944540032</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a += <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">1944540128</span></span><br></pre></td></tr></table></figure><p>但是当不可变对象比较大时，这个规律不符合，并不会创建新的对象。<strong>常量池</strong></p><h2 id="python中的复制，浅拷贝和深拷贝"><a href="#python中的复制，浅拷贝和深拷贝" class="headerlink" title="python中的复制，浅拷贝和深拷贝"></a>python中的复制，浅拷贝和深拷贝</h2><p><strong>复制</strong>只传递对象的引用，也就是对象的地址<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">1264995283336</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</span><br><span class="line"><span class="number">1264995283336</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure></p><p><strong>浅拷贝</strong>指把存放变量的地址值传给被赋值，最后两个变量引用了同一份地址。copy会根据数据类型为可变还是不可变进行判断：如果是不可变类型，和复制相同；如果是可变类型，只是<strong>拷贝第一层</strong>（也就是对于list类型中，其中的元素中指向的其他地址不变化）。<br>用到的方法是 copy.copy()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> copy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=copy.copy(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(c)</span><br><span class="line"><span class="number">1264997856200</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">1264995283336</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=copy.copy(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">1264995283336</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(c)</span><br><span class="line"><span class="number">1264997856264</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=copy.copy(b)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</span><br><span class="line"><span class="number">1354853888</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(d)</span><br><span class="line"><span class="number">1354853888</span></span><br></pre></td></tr></table></figure></p><p>发现，同样是浅拷贝，拷贝后的a和b却给了不同的处理。因为a是list，是<strong>可变对象</strong>，而b是int数据类型，属于<strong>不可变对象</strong>。<br>换言之，对于可变对象，浅拷贝与复制不同，拷贝的结果存放在一个新的空间。而对于不可变对象，拷贝和复制的意义相同，都指向同一个地址空间。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; id(c)</span><br><span class="line">1264997856200</span><br><span class="line">&gt;&gt;&gt; id(a)</span><br><span class="line">1264995283336</span><br><span class="line">&gt;&gt;&gt; id(b)</span><br><span class="line">1354853888</span><br><span class="line">&gt;&gt;&gt; id(d)</span><br><span class="line">1354853888</span><br></pre></td></tr></table></figure></p><p>但是，对于不可变对象，当改变某个变量时候，由于其所指的值不能被改变，相当于把原来的值复制一份后再改变，这会开辟一个新的地址，变量再指向这个新的地址。因此，改变一个变量，其地址会发生改变，而原来复制出的变量则指向原来的值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = copy.copy(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = copy.deepcopy(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">1354853888</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</span><br><span class="line"><span class="number">1354853888</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(c)</span><br><span class="line"><span class="number">1354853888</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(d)</span><br><span class="line"><span class="number">1354853888</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = a + <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">1354853984</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</span><br><span class="line"><span class="number">1354853888</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(c)</span><br><span class="line"><span class="number">1354853888</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(d)</span><br><span class="line"><span class="number">1354853888</span></span><br></pre></td></tr></table></figure></p><p>可见，<strong>对于不可变对象，深拷贝，浅拷贝，复制 效果一样</strong>。</p><p><strong>深拷贝</strong>包含对象里面的内容的拷贝，重新开辟一个新的空间，所以原始对象的改变不会造成深拷贝里任何子元素的改变。<br>（<em>实际上，一般所谓的拷贝操作，都是在list上进行的，所以只需要知道在lists上着三种拷贝操作的意义和结论即可</em>）<br>深拷贝和浅拷贝的区别直接看代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = copy.copy(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = copy.deepcopy(a)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">1264997889288</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</span><br><span class="line"><span class="number">1264997862472</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(c)</span><br><span class="line"><span class="number">1264997889736</span></span><br><span class="line"><span class="comment">#深拷贝和浅拷贝的区别在，深拷贝复制了整个对象，而浅拷贝只是复制了第一层的元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a[<span class="number">0</span>])</span><br><span class="line"><span class="number">1264997875208</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b[<span class="number">0</span>])</span><br><span class="line"><span class="number">1264997875208</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(c[<span class="number">0</span>])</span><br><span class="line"><span class="number">1264997861640</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">[[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>].append(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">[[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;：介绍python中的可变对象与不可变对象的概念。&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1522348726856&amp;amp;di=94ad6fe367916649eef70bb9303a9537&amp;amp;imgtype=0&amp;amp;src=http://file.digitaling.com/eImg/image/20140113/20140113145051_79090.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="coding" scheme="http://yoursite.com/categories/coding/"/>
    
    
      <category term="notes" scheme="http://yoursite.com/tags/notes/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python惰性序列</title>
    <link href="http://yoursite.com/2018/03/17/python%E6%83%B0%E6%80%A7%E5%BA%8F%E5%88%97/"/>
    <id>http://yoursite.com/2018/03/17/python惰性序列/</id>
    <published>2018-03-17T02:48:20.000Z</published>
    <updated>2018-03-30T04:27:50.315Z</updated>
    
    <content type="html"><![CDATA[<p>python中的高级特性——惰性序列<br><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1522348726856&amp;di=94ad6fe367916649eef70bb9303a9537&amp;imgtype=0&amp;src=http://file.digitaling.com/eImg/image/20140113/20140113145051_79090.jpg" alt="此处输入图片的描述"></p><a id="more"></a><h2 id="生成器generator"><a href="#生成器generator" class="headerlink" title="生成器generator"></a><font color="red">生成器generator</font></h2><p>一边计算一边循环的机制，称为<strong>生成器</strong>。<br>generator非常强大。相比于传统的for循环直接生成一个list，generator可以<strong>节省大量的空间</strong>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; g = (x * x for x in range(10))</span><br><span class="line">&gt;&gt;&gt; for n in g:</span><br><span class="line">...     print(n)</span><br><span class="line">...</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">9</span><br><span class="line">16</span><br><span class="line">25</span><br><span class="line">36</span><br><span class="line">49</span><br><span class="line">64</span><br><span class="line">81</span><br></pre></td></tr></table></figure></p><p>如果推算的算法比较复杂，用类似列表生成式的for循环无法实现的时候，还可以用函数来实现。<br>著名的<strong>斐波拉契数列</strong>（Fibonacci）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def fib(max):</span><br><span class="line">    n, a, b = 0, 0, 1</span><br><span class="line">    while n &lt; max:</span><br><span class="line">        yield b</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + 1</span><br><span class="line">    return &apos;done&apos;</span><br></pre></td></tr></table></figure></p><p><strong>杨辉三角</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def yanghui(max):</span><br><span class="line">    line=[1]</span><br><span class="line">    while True:</span><br><span class="line">        yield line</span><br><span class="line">        nextline = line+[1]#注意这个表达</span><br><span class="line">        for i in range(len(line)):</span><br><span class="line">             if i != 0:</span><br><span class="line">                 nextline[i] = line[i-1] + line[i]</span><br><span class="line">        line = nextline</span><br><span class="line">    return &quot;done&quot;</span><br></pre></td></tr></table></figure></p><h2 id="Iterable与Iterator，iter"><a href="#Iterable与Iterator，iter" class="headerlink" title="Iterable与Iterator，iter()"></a><font color="red">Iterable与Iterator，iter()</font></h2><h3 id="Iterable"><a href="#Iterable" class="headerlink" title="Iterable"></a>Iterable</h3><p>python中直接作用于<font color="blue">for循环</font>的对象统称为可迭代对象：<strong>Iterabale</strong>.<br>一类是<strong>集合数据类型</strong>，如list、tuple、dict、set、str等；<br>一类是<strong>generator</strong>，包括生成器和带yield的generator function。<br>判断一个对象是否是可迭代对象,可以使用collections模块的<strong>Iterable</strong>类型判断。</p><h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><p>能够被<font color="blue">next()</font>函数调用并不断返回下一个值的对象称为迭代器：<strong>Iterator</strong>。</p><h3 id="iter"><a href="#iter" class="headerlink" title="iter()"></a>iter()</h3><p>可以使用isinstance()判断一个对象是否是Iterator对象。<br>可以使用iter()函数把list，dict，str获得一个Iterator对象，用next()计算。</p><h3 id="code-examples"><a href="#code-examples" class="headerlink" title="code examples"></a>code examples</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;from collections import Iterable</span><br><span class="line">&gt;&gt;&gt;isinstance(&quot;abc&quot;,Iterable)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;from collections import Iterator</span><br><span class="line">&gt;&gt;&gt;isinstance([],Iterator)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt;isinstance(iter([]),Iterator)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#注意下面的区别</span><br><span class="line">&gt;&gt;&gt;isinstance((x for x in range(10)),Iterator)</span><br><span class="line">#返回的是一个生成器对象，不是tuple</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt;isinstance((),Iterator)</span><br><span class="line">#tuple不是迭代器</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt;isinstance([x for x in range(10)],Iterator)</span><br><span class="line">#返回一个list</span><br><span class="line">False</span><br></pre></td></tr></table></figure><pre><code>为什么list、dict、str等数据类型不是Iterator？这是因为Python的Iterator对象表示的是一个数据流，Iterator对象可以被next()函数调用并不断返回下一个数据，直到没有数据时抛出StopIteration错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过next()函数实现按需计算下一个数据，所以Iterator的计算是惰性的，只有在需要返回下一个数据时它才会计算。Iterator甚至可以表示一个无限大的数据流，例如全体自然数。而使用list是永远不可能存储全体自然数的。</code></pre><h2 id="惰性序列"><a href="#惰性序列" class="headerlink" title="惰性序列"></a><font color="red">惰性序列</font></h2><h3 id="惰性计算"><a href="#惰性计算" class="headerlink" title="惰性计算"></a><a href="https://zh.wikipedia.org/wiki/%E6%83%B0%E6%80%A7%E6%B1%82%E5%80%BC" target="_blank" rel="noopener">惰性计算</a></h3><h3 id="惰性序列-1"><a href="#惰性序列-1" class="headerlink" title="惰性序列"></a>惰性序列</h3><p>python中的惰性序列多数指Iterator。对于存在巨大甚至无限多的元素的序列，迭代器仅仅在迭代至某个元素时才计算该元素，在此之前或者之后，元素可以不存在或者被销毁。</p><h3 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h3><p>一是这样我们就可以实现的无限序列的表示，比如全部的自然数(无穷尽)，而不需要真的在内存中计算出所有的自然数(那根本不可能，因为内存也不是无限的)，而是需要哪个数，计算到哪个数，或者需要哪些数，计算到那些数(比如前1000个)。<br>二是在大规模数据处理中起到延迟计算的作用。当你处理大规模数据时，一次性进行处理往往是不方便的。而惰性序列就可以解决这个问题，它把计算的步骤延迟到了要实际使用该数据的时候。<br>惰性序列可以看作是一个”流”，需要的时候从其中取一滴水。</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a><font color="red">reference</font></h2><p><a href="http://blog.csdn.net/solo95/article/details/78834041" target="_blank" rel="noopener">博客</a><br><a href="http://blog.csdn.net/it_dream_er/article/details/50890201" target="_blank" rel="noopener">博客2</a><br><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014317852443934a86aa5bb5ea47fbbd5f35282b331335000" target="_blank" rel="noopener">教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python中的高级特性——惰性序列&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1522348726856&amp;amp;di=94ad6fe367916649eef70bb9303a9537&amp;amp;imgtype=0&amp;amp;src=http://file.digitaling.com/eImg/image/20140113/20140113145051_79090.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="coding" scheme="http://yoursite.com/categories/coding/"/>
    
    
      <category term="notes" scheme="http://yoursite.com/tags/notes/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>“Google机器学习速成课程”概念浏览</title>
    <link href="http://yoursite.com/2018/03/13/%E2%80%9CGoogle%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E9%80%9F%E6%88%90%E8%AF%BE%E7%A8%8B%E2%80%9D%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/03/13/“Google机器学习速成课程”概念总结/</id>
    <published>2018-03-13T03:37:30.000Z</published>
    <updated>2018-03-13T03:29:51.437Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong> ：简单总结几个最近发布的“机器学习速成课程”中的概念<br><a id="more"></a></p><p><strong>正文:</strong></p><p><strong>随机梯度下降法（SGD）</strong>：在梯度下降法中，批量指的是用于在单次迭代中计算梯度的样本总数。到目前为止，我们一直假定批量是指整个数据集。就 Google 的规模而言，数据集通常包含数十亿甚至数千亿个样本。此外，Google 数据集通常包含海量特征。因此，一个批量可能相当巨大。如果是超大批量，则单次迭代就可能要花费很长时间进行计算。</p><p>包含随机抽样样本的大型数据集可能包含冗余数据。实际上，批量大小越大，出现冗余的可能性就越高。一些冗余可能有助于消除杂乱的梯度，但超大批量所具备的预测价值往往并不比大型批量高。</p><p>如果我们可以通过更少的计算量得出正确的平均梯度，会怎么样？通过从我们的数据集中随机选择样本，我们可以通过小得多的数据集估算（尽管过程非常杂乱）出较大的平均值。 随机梯度下降法 (SGD) 将这种想法运用到极致，它每次迭代只使用一个样本（批量大小为 1）。如果进行足够的迭代，SGD 也可以发挥作用，但过程会非常杂乱。“随机”这一术语表示构成各个批量的一个样本都是随机选择的。</p><p>小批量随机梯度下降法（小批量 SGD）是介于全批量迭代与 SGD 之间的折衷方案。小批量通常包含 10-1000 个随机选择的样本。小批量 SGD 可以减少 SGD 中的杂乱样本数量，但仍然比全批量更高效。</p><p><strong>特征工程</strong>：从原始数据创建特征的过程。会花费实际工作中百分之70的时间。<br>良好特征具有下列特点：1.避免很少使用的离散特征值2.最好具有清晰明确的定义3.异常的数值不要和实际数据混为一谈4.考虑随着时间的不稳定性</p><p><strong>数据清洗</strong>：1.缩放特征值2.处理极端离群值3.分箱4.清查（遗漏值，重复样本，不良标签，不良特征值）5.了解数据</p><p><strong>特征组合</strong>:是指通过将两个或多个输入特征相乘来对特征空间中的非线性规律进行编码的合成特征。</p><ul><li>[A X B]：将两个特征的值相乘形成的特征组合。</li><li>[A x B x C x D x E]：将五个特征的值相乘形成的特征组合。</li><li>[A x A]：对单个特征的值求平方形成的特征组合。</li></ul><p><strong>机器学习训练过程问题</strong>：<br><em>梯度消失</em><br>较低层（更接近输入）的梯度可能会变得非常小。在深度网络中，计算这些梯度时，可能涉及许多小项的乘积。当较低层的梯度逐渐消失到 0时，这些层的训练速度会非常缓慢，甚至不再训练。<br>ReLU 激活函数有助于防止梯度消失。</p><p><em>梯度爆炸</em><br>如果网络中的权重过大，则较低层的梯度会涉及许多大项的乘积。在这种情况下，梯度就会爆炸：梯度过大导致难以收敛。<br>批标准化可以降低学习速率，因而有助于防止梯度爆炸。</p><p><em>ReLU 单元消失</em><br>一旦 ReLU 单元的加权和低于 0，ReLU 单元就可能会停滞。它会输出对网络输出没有任何贡献的 0 激活，而梯度在反向传播算法期间将无法再从中流过。由于梯度的来源被切断，ReLU 的输入可能无法作出足够的改变来使加权和恢复到 0 以上。<br>降低学习速率有助于防止 ReLU 单元消失。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt; ：简单总结几个最近发布的“机器学习速成课程”中的概念&lt;br&gt;
    
    </summary>
    
      <category term="Machine Learning" scheme="http://yoursite.com/categories/Machine-Learning/"/>
    
    
      <category term="notes" scheme="http://yoursite.com/tags/notes/"/>
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>leetcode15-3sum解题报告</title>
    <link href="http://yoursite.com/2018/02/21/leetcode15%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    <id>http://yoursite.com/2018/02/21/leetcode15解题报告/</id>
    <published>2018-02-21T08:31:08.000Z</published>
    <updated>2018-03-17T02:01:06.093Z</updated>
    
    <content type="html"><![CDATA[<p>Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.<br><a id="more"></a></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>Note:</strong><br>Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)<br>The solution set must not contain duplicate triplets.<br>    For example, given array S = {-1 0 1 2 -1 -4},<br>    A solution set is:<br>    (-1, 0, 1)<br>    (-1, -1, 2)</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li>先把无序数组排序</li><li>固定一个数，找出其余两个数让它们的和为固定数的相反数（相加为0）</li></ol><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;  </span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ret = new ArrayList&lt;List&lt;Integer&gt;&gt;();  </span><br><span class="line"></span><br><span class="line">    public List&lt;List&lt;Integer&gt;&gt; threeSum(int[] num) &#123;  </span><br><span class="line">        if (num == null || num.length &lt; 3) return ret;  </span><br><span class="line"></span><br><span class="line">        Arrays.sort(num);  </span><br><span class="line"></span><br><span class="line">        int len = num.length;  </span><br><span class="line">        for (int i = 0; i &lt; len-2; i++) &#123;  </span><br><span class="line">            if (i &gt; 0 &amp;&amp; num[i] == num[i-1]) continue;  </span><br><span class="line">            find(num, i+1, len-1, num[i]); //寻找两个数与num[i]的和为0  </span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">        return ret;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    public void find(int[] num, int begin, int end, int target) &#123;  </span><br><span class="line">        int l = begin, r = end;  </span><br><span class="line">        while (l &lt; r) &#123;  </span><br><span class="line">            if (num[l] + num[r] + target == 0) &#123;  </span><br><span class="line">                List&lt;Integer&gt; ans = new ArrayList&lt;Integer&gt;();  </span><br><span class="line">                ans.add(target);  </span><br><span class="line">                ans.add(num[l]);  </span><br><span class="line">                ans.add(num[r]);  </span><br><span class="line">                ret.add(ans); //放入结果集中  </span><br><span class="line">                while (l &lt; r &amp;&amp; num[l] == num[l+1]) l++;  </span><br><span class="line">                while (l &lt; r &amp;&amp; num[r] == num[r-1]) r--;  </span><br><span class="line">                l++;  </span><br><span class="line">                r--;  </span><br><span class="line">            &#125; else if (num[l] + num[r] + target &lt; 0) &#123;  </span><br><span class="line">                l++;  </span><br><span class="line">            &#125; else &#123;  </span><br><span class="line">                r--;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>这个题目要注意得出的结论可能出现重复的可能，另外要考虑的所有特殊情况如下：</p><ol><li>结果重复</li><li>输入数组长度不够</li><li>输入数组为空<br>另外，在搜寻三个数使得其和为0的思路上，不能采取用三个循环的思想，这样会导致时间复杂度很高。可以固定其中的一个数，设置两个指针，让这两个指针移动计算,降低时间复杂度。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.&lt;br&gt;
    
    </summary>
    
      <category term="coding" scheme="http://yoursite.com/categories/coding/"/>
    
    
      <category term="algorithms" scheme="http://yoursite.com/tags/algorithms/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04安装OpenCV3.3教程</title>
    <link href="http://yoursite.com/2017/12/22/Ubuntu16.04%E5%AE%89%E8%A3%85OpenCV3.3/"/>
    <id>http://yoursite.com/2017/12/22/Ubuntu16.04安装OpenCV3.3/</id>
    <published>2017-12-22T06:38:20.000Z</published>
    <updated>2017-12-25T11:43:38.913Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong>搭建OpenCV3.3的过程<br><a id="more"></a></p><h2 id="安装依赖环境"><a href="#安装依赖环境" class="headerlink" title="安装依赖环境"></a>安装依赖环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install build-essential libopencv-dev</span><br><span class="line">$ sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line">$ sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev # 处理图像所需的包</span><br><span class="line">$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev liblapacke-dev</span><br><span class="line">$ sudo apt-get install libxvidcore-dev libx264-dev # 处理视频所需的包</span><br><span class="line">$ sudo apt-get install libatlas-base-dev gfortran # 优化opencv功能</span><br><span class="line">$ sudo apt-get install ffmpeg</span><br></pre></td></tr></table></figure><h2 id="获取源代码"><a href="#获取源代码" class="headerlink" title="获取源代码"></a>获取源代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/opencv/opencv.git</span><br></pre></td></tr></table></figure><h2 id="编译源代码"><a href="#编译源代码" class="headerlink" title="编译源代码"></a>编译源代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cd opencv</span><br><span class="line"></span><br><span class="line">$ mkdir build</span><br><span class="line"></span><br><span class="line">$ cd build</span><br><span class="line"></span><br><span class="line">$ cmake ..</span><br><span class="line"></span><br><span class="line">$ make -j 10</span><br></pre></td></tr></table></figure><h2 id="替换旧版本"><a href="#替换旧版本" class="headerlink" title="替换旧版本"></a>替换旧版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure><h2 id="编译出错的处理"><a href="#编译出错的处理" class="headerlink" title="编译出错的处理"></a>编译出错的处理</h2><p>执行cmake的时候，可能会出现下面的错误信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CMake Error at CMakeLists.txt:11 (message):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  FATAL: In-source builds are not allowed.</span><br><span class="line"></span><br><span class="line">         You should create separate directory for build files.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- Configuring incomplete, errors occurred!</span><br></pre></td></tr></table></figure></p><p>则是在代码根目录下直接执行过 cmake，导致根目录下生成了 CMakeCache.txt，需要删除 CMakeCache.txt再次执行编译即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;搭建OpenCV3.3的过程&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="notes" scheme="http://yoursite.com/tags/notes/"/>
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>python字符串切片操作</title>
    <link href="http://yoursite.com/2017/11/26/python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%87%E5%8F%96%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/11/26/python字符串切取操作/</id>
    <published>2017-11-26T09:04:31.000Z</published>
    <updated>2018-03-30T04:29:06.469Z</updated>
    
    <content type="html"><![CDATA[<p>详述在python中如何切片？<br><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1522348726856&amp;di=94ad6fe367916649eef70bb9303a9537&amp;imgtype=0&amp;src=http://file.digitaling.com/eImg/image/20140113/20140113145051_79090.jpg" alt="此处输入图片的描述"></p><a id="more"></a><h2 id="字符index"><a href="#字符index" class="headerlink" title="字符index"></a>字符index</h2><p>首先需要明白字符的index是什么？<br>对于一个字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;str = &quot;abcdefg&quot;</span><br></pre></td></tr></table></figure></p><p>其各个字符的index分别为 0 1 2 3 4 5 6<br>如果用负数表示，就是 -7 -6 -5 -4 -3 -2 -1</p><h2 id="取字符串中第几个字符"><a href="#取字符串中第几个字符" class="headerlink" title="取字符串中第几个字符"></a>取字符串中第几个字符</h2><p>根据index获取即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;str[2]</span><br><span class="line">a</span><br></pre></td></tr></table></figure></p><h2 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h2><p>表达式 str[a:b]，表示从字符串index为a的字符，截取到index为b-1的字符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;str[1:2]</span><br><span class="line">b</span><br></pre></td></tr></table></figure></p><h2 id="步长截取"><a href="#步长截取" class="headerlink" title="步长截取"></a>步长截取</h2><p>str[a:b:c]:表示从第a个字符串开始，截取到第b个字符的前一个为止。<br>不过这里要&lt;\font color = ‘red’&gt;注意&lt;\font&gt;:<br>当c小于0时，字符串的index是反向数的，也就是从index为b的到index为a+1的字符，每隔-c个字符取一个字符。<br>比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;str[3:1:-1]</span><br><span class="line">dc</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;详述在python中如何切片？&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1522348726856&amp;amp;di=94ad6fe367916649eef70bb9303a9537&amp;amp;imgtype=0&amp;amp;src=http://file.digitaling.com/eImg/image/20140113/20140113145051_79090.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="coding" scheme="http://yoursite.com/categories/coding/"/>
    
    
      <category term="notes" scheme="http://yoursite.com/tags/notes/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>《Can you fool AI with adversarial examples on a visual Turing test?》论文笔记</title>
    <link href="http://yoursite.com/2017/11/21/%E3%80%8ACan-you-fool-AI-with-adversarial-examples-on-a-visual-Turing-test-%E3%80%8B%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/11/21/《Can-you-fool-AI-with-adversarial-examples-on-a-visual-Turing-test-》论文笔记/</id>
    <published>2017-11-21T12:46:27.000Z</published>
    <updated>2017-11-21T15:52:16.060Z</updated>
    
    <content type="html"><![CDATA[<p>Xu X. Can you fool AI with adversarial examples on a visual Turing test?[J]. 2017.<br><a id="more"></a></p><h2 id="citation"><a href="#citation" class="headerlink" title="citation"></a>citation</h2><p>Xu X. Can you fool AI with adversarial examples on a visual Turing test?[J]. 2017.</p><h2 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h2><p>先介绍<strong>VQA(Visual Question Answering)</strong>：也叫做visual Turing test，也就是让机器学习模型回答一个关于图片的用自然语言表述的问题。可以通过回答的正确度判断模型的效果。<br>VQA问题是深度学习的引用问题中比较复杂的一个分支，涉及的面也比较广，但是同样也会受到对抗样本攻击的影响。在这篇文章中，研究目标就是利用目标对抗攻击，让模型生成特定的question-answer pair。（这是对VQA系统进行对抗攻击的第一次尝试）</p><h2 id="content-and-contributions"><a href="#content-and-contributions" class="headerlink" title="content and contributions"></a>content and contributions</h2><p>本文的<strong>研究内容</strong>如下：</p><pre><code>1.  实验证明了一个训练好的VQA模型也会被对抗攻击影响。这里的攻击设定为白盒攻击：即是已知这个VQA模型的结构和权重。2.  进一步用对抗样本攻击目前效果最好的VQA模型，发现了两个现象：1) 如果目标question-answer对出现频率越大，内容更加想关，回答更加有意义，那么以这个“问答对”作为目标构造的对抗样本成功率更高。（这个现象叫做language prior，也比较好解释，模型往往会选择更加有意义，关联性更强的问答组合作为最终的结果。这种现象在针对具有显示推理特征的VQA模型时更加明显）2) 在VQA问题中构造的对抗样本具有可移植性，说明可以用这个方法构造黑盒攻击。3. 研究在两种训练好的模型的上进行了对抗攻击，一种模型是 bilinear fusion model MCG（结合问题和图片的特征预测答案），一种是组合模型NMN（建立依赖问题的网络布局，让这个网络处理图片得到预测答案）。比较之下，后者更不容易受到对抗样本的影响，说明了这种结构的模型更加稳定。</code></pre><p>研究的<strong>contribution</strong>如下：</p><pre><code>1. 第一个提出针对VQA模型的对抗攻击2. 提出生成对抗样本的新算法3. 实验发现了当目标问答对出现频率比较高时，VQA模型存在目标对抗样本。且这种对抗样本有可移植性4. 发现了language prior现象，即是当以一些问答对作为攻击目标时，效果很差5. 发现组合的神经网络模型更加稳定，这种增强模型稳定性的结构可以作为提升模型鲁棒性的参考。</code></pre><h2 id="background"><a href="#background" class="headerlink" title="background"></a>background</h2><h3 id="VQA"><a href="#VQA" class="headerlink" title="VQA"></a>VQA</h3><p>所谓的VQA，也就是Given an image and a natural language question as an input, the goal of VQA is to predict a natural language answer. 它的应用很广，研究中用到的组合VQA和非组合VQA如下：</p><h4 id="non-compositional"><a href="#non-compositional" class="headerlink" title="non-compositional"></a>non-compositional</h4><p>以[A. Fukui, D. H. Park, D. Yang, A. Rohrbach, T. Darrell, and M. Rohrbach, “Multimodal compact bilinear pooling for visual question answering and visual grounding,” in Proceedings of the Conference on Empirical Methods in Natural Language Processing (EMNLP), 2016.]提出的MCB方法为例。这个方法是先用两个网络模型$f_1$和$f_2$分别映射原始图片和question。它依赖的模型是一个整体结构，可以直观理解为输入端问题和图片到输出端答案的映射，输出就是计算出的$argmax_j(softmax(Wu^.))$。</p><h4 id="compositional"><a href="#compositional" class="headerlink" title="compositional"></a>compositional</h4><p>这种组合模型，比如[R. Hu, J. Andreas, M. Rohrbach, T. Darrell, and K. Saenko,“Learning to reason: End-to-end module networks for visual question answering,” in Proc. of ICCV, 2017.]提出的方法。这种组合可以解释为两步：首先计算根据问题和图片的表达式$u_i^.$；然后基于问题question和$u_i^.$预测答案。<br>也就是这种模型有两步操作，两步依次执行最终给出预测答案。而在Hu等人的研究中，将这两步又拆分成了九个module，比如找到图片中的相关区域算为一个module。这种不同module组合形成的模型，也就叫做组合模型。<br>adversarial examples、Transferability and Black-box Attacks的相关背景比较熟悉，不再赘述</p><h2 id="model-details"><a href="#model-details" class="headerlink" title="model details"></a>model details</h2><p>研究有几个前提：</p><pre><code>1. **白盒攻击**，即是攻击者知道模型的结构和网络权重。因此，攻击者可以计算模型的输出关于输入的梯度值。而本实验就是在这个假设的前提下进行的。利用这个梯度信息，就可以生成降低模型准确度的对抗攻击。2. 目标模型没有任何防御策略：并不会影响本实验的典型性，因为 most existing defense proposals are either not properly evaluated and vulnerable to strong attacks, or only designed for black-box attacks 。3. 攻击形式是指定目标的target attack：原因一是因为非目标攻击威胁不大，其二是因为真实攻击者用目标攻击往往能产生更好的攻击效果。4. attack success rate：攻击成功率用来衡量生成的对抗样本，也是一个标准测量方法。5. 提高模型的输出概率：因为模型是根据输出的概率向量来预测问题的答案，如果这个概率比较低，就容易被防御策略检测出来，因此，提高对抗样本的输出概率值，也能反映攻击的有效性。</code></pre><h2 id="algorithms"><a href="#algorithms" class="headerlink" title="algorithms"></a>algorithms</h2><p>VQA模型定义为$f_\theta(I,Q)$,$\theta$是模型的参数，I是输入图片，Q是输入问题，f的结果是预测的答案概率值。与传统将VQA问题视作分类问题不同，作者将对这个模型$f_\theta$攻击抽象为，构建一个对抗样本图片$I^{adv}$,让模型的输出为问答对$(Q^{target},A^{target})$的概率最大，即是<br>$$f_\theta(Q^{target},A^{target})=A^{target} s.t.d(I^{adv},I^{ori})\le B$$<br>整体的优化问题即是：<br>$$argmin_{I^{adv}}L(J_\theta (I^{adv},Q^{target}),A^{target}) s.t.d(I^{adv},I^{ori})\le B$$</p><p>本文提出的算法优化，主要就是用一种替代目标函数来逼近优化函数，从而提升效率。<br>$$\xi(A^{predict})= L(J_\theta (I^{adv},Q^{target})+\lambda <em>1.l(A</em>{target}\ne A^{predict}.(\tau-L(J_\theta(x,Q^{target},A^{predict})))+\lambda _2.ReLU(d(x,I^{ori})-B+\epsilon)$$<br>整体的算法如下：<br><img src="http://ww3.sinaimg.cn/large/0060lm7Tly1flq4t7v27ej30bn06lmxx.jpg" alt="此处输入图片的描述"></p><h2 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h2><p>文章的结论有三个方面：</p><pre><code>1. 目标对抗攻击（本文是目标对抗攻击）的成功率主要受到所选择的question-answer pair的类别的影响，跟参考图片的选择关系不大。2. 发现了language prior phenomenon，给针对特定question-answer pair能产生对抗样本提供了一种可能的解释。3. 发现组合VQA模型结构更加稳定。</code></pre><p>这篇文章对对抗攻击的创新主要就是1）应用在了VQA新场景下2）优化目标函数的方法比较新颖</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Xu X. Can you fool AI with adversarial examples on a visual Turing test?[J]. 2017.&lt;br&gt;
    
    </summary>
    
      <category term="paper" scheme="http://yoursite.com/categories/paper/"/>
    
    
      <category term="secure" scheme="http://yoursite.com/tags/secure/"/>
    
      <category term="papernotes" scheme="http://yoursite.com/tags/papernotes/"/>
    
  </entry>
  
  <entry>
    <title>《Delving into adversarial attacks on deep policies》论文笔记</title>
    <link href="http://yoursite.com/2017/11/19/%E3%80%8ADelving-into-adversarial-attacks-on-deep-policies%E3%80%8B%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/11/19/《Delving-into-adversarial-attacks-on-deep-policies》论文笔记/</id>
    <published>2017-11-19T15:53:55.000Z</published>
    <updated>2017-11-21T15:52:03.475Z</updated>
    
    <content type="html"><![CDATA[<p>Kos J, Song D. Delving into adversarial attacks on deep policies[J]. 2017.<br><a id="more"></a></p><h2 id="citation"><a href="#citation" class="headerlink" title="citation"></a>citation</h2><p>Kos J, Song D. Delving into adversarial attacks on deep policies[J]. 2017.</p><h2 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h2><p>这篇文章是关于深度<strong>增强学习策略</strong>网络模型的对抗攻击研究。<br>主要的研究内容有：</p><pre><code>1. 比较对抗样本和随机噪声的攻击性2. 提出了一个基于值函数的可以提高对抗样本生成效率，减少实现一个成功的对抗攻击时需要“入侵”目标模型的次数。3. 研究如何重新训练来增强模型对随机噪声和FGSM攻击的稳定性。</code></pre><h2 id="study-content"><a href="#study-content" class="headerlink" title="study content"></a>study content</h2><p>这篇文章contribution和objects都是三个：</p><pre><code>1. 比较了随机噪声和对抗样本对深度增强学习策略模型deep reinforcement learning (DRL) 的影响。发现了采用这种DRL策略的模型也容易受到对抗样本的攻击。2. 提出了利用增强学习策略中的值函数来引导攻击者选择在原始样本中添加对抗扰动的时间。（这种构造对抗样本的方法相比于以前在图片分类等等任务中，间隔固定时间添加对抗扰动的策略更复杂一些，但是作者发现这样效率更高）3. 通过re-training可以增强策略的稳定性。初步结果表明，通过re-training，agents可以对FGSM生成的对抗样本和随机噪音都更加稳定。同时，作者也研究了这种提高的稳定性是否会根据扰动的不同规模和不同种类而发生改变。发现这种方法并不能增强模型对其他攻击类型的防御能力。</code></pre><p>对第二个研究目标，作者提出了三个方法来探究是否减少了添加perturbation的频率也能生成有效的对抗样本：1)每隔N步给原始样本注入一次扰动，在间隔中计算扰动但是不添加到样本中；2)每隔N步计算一次扰动，并加入到数据样本中；3)引入一个“值函数”，计算什么时候添加扰动效果最好，确保添加的时机让这个值函数处于阈值。</p><h2 id="experimental-evaluation"><a href="#experimental-evaluation" class="headerlink" title="experimental evaluation"></a>experimental evaluation</h2><p>这部分首先是介绍两个概念，A3C算法是一个应用在深度增强学习任务中的比较成功的算法：通过策略权值的异步更新权值。<br>[Volodymyr Mnih, Adria Puigdomenech Badia, Mehdi Mirza, Alex Graves, Timothy P Lillicrap, Tim Harley, David Silver, and Koray Kavukcuoglu. Asynchronous methods for deep reinforcement learning. In International Conference on Machine Learning, 2016.]<br>另一个概念是FGSM，也就是  Goodfellow等人提出的比较典型的对抗样本生成算法。<br>实验首先在base-line的情况下得到了一个在Atari Pong任务中训练得到的增强模型，然后设定FGSM中的对抗扰动规模超参数$\epsilon$，并得到对抗样本。同时从均匀分布$unif(0,β)$随机取样得到随机噪声。<br><strong>实验结果</strong>上，第一个任务没有什么值得注意的。对于第二个任务，这里的N设为10，实验结果如图：<br><img src="http://ww4.sinaimg.cn/large/0060lm7Tly1floxb9x6nqj30qi0akmyf.jpg" alt="此处输入图片的描述"><br>在$\epsilon$为0.005，扰动规模一定的情况下，第一个方法生成的对抗样本效果不如每隔10步计算一次perturbation得到的样本（方法2）效果更好。<br>同时，用一个让值函数大于一个阈值时才加入对抗扰动的策略，如下图：<br><img src="http://ww4.sinaimg.cn/large/0060lm7Tly1floxhetyc7j30cm0a4t9j.jpg" alt="此处输入图片的描述"><br>红色的线表示值函数的变化，这个值函数即是增强学习的反馈值。当这个函数大于一定值的时机加入对抗扰动，即是这个扰动也更加贴近模型训练时的反馈。<br>最终的结论是，在增强学习背景下，用基于值函数得到的对抗样本，尽管更加复杂，但是也更加高效，得到的样本对抗性更强。</p><h2 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h2><p>今年才开始有将对抗样本应用到增强学习领域的相关研究。相比于《Vulnerability of Deep Reinforcement Learning to Policy Induction Attacks》，，前者是通过改变对抗样本训练策略，将对抗样本的训练和增强学习的反馈结合起来，得到更高效且效果更好的攻击样本。后者针对的策略是Deep Q-networks，并且是利用了对抗样本的transferability。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kos J, Song D. Delving into adversarial attacks on deep policies[J]. 2017.&lt;br&gt;
    
    </summary>
    
      <category term="paper" scheme="http://yoursite.com/categories/paper/"/>
    
    
      <category term="secure" scheme="http://yoursite.com/tags/secure/"/>
    
      <category term="papernotes" scheme="http://yoursite.com/tags/papernotes/"/>
    
  </entry>
  
  <entry>
    <title>《Generative Face Completion》论文笔记</title>
    <link href="http://yoursite.com/2017/11/18/%E3%80%8AGenerative-Face-Completion%E3%80%8B%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/11/18/《Generative-Face-Completion》论文笔记/</id>
    <published>2017-11-18T08:46:15.000Z</published>
    <updated>2017-11-22T08:53:42.601Z</updated>
    
    <content type="html"><![CDATA[<p>Title: Generative Face Completion<br>Authors:  Li, Yijun; Liu, Sifei; Yang, Jimei; Yang, Ming-Hsuan<br>Publication: eprint arXiv:1704.05838<br>Publication Date:  04/2017<br>Origin:  ARXIV<br>Keywords: Computer Science - Computer Vision and Pattern Recognition<br>Comment: Accepted by CVPR 2017<br>Bibliographic Code: 2017arXiv170405838L </p><a id="more"></a><h2 id="citation"><a href="#citation" class="headerlink" title="citation"></a>citation</h2><p>Li Y, Liu S, Yang J, et al. Generative Face Completion[J]. 2017.</p><h2 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h2><p>论文用深度生成模型实现了一个高效面部补全算法。与传统从已给数据集中搜寻相似图片块儿来进行补全和合成残缺图片的方法不同，作者是直接使用一个神经网络来合成残缺部分的内容。整个模型由三部分构成：a reconstruction loss、two adversarial losses、a semantic parsing loss。</p><p><strong>a) 论文目的：</strong></p><p>传统以复制-粘贴的方式来进行图片补全在背景填充方面效果不错，但在面对填充脸部图片这种目标图片比较独特时却效果不佳。作者于是想用深度生成模型构建一个有效的目标补全算法，能不需要参照外部数据集快速完成对图片的补全。</p><p><strong>b) 论文贡献：</strong></p><p>首先提出了一个深度生成补全图片补全模型，这个模型通过encoding-decoding 生成器、两个对抗判别器来合成用随机噪声遮挡的部分；其次对挑战性的脸部补全任务进行处理，并且实现提出的模型能够根据学习到的目标特征，产生整体比较和谐的图片；最后，作者证明了生成semantic parsing部分的有效性。</p><p><strong>c) 模型结构：</strong></p><p>整体结构如下图：<br><img src="http://img.blog.csdn.net/20170426165038520?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbTBfMzcyMzEwMTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>生成器G：结构有encoder层、两个全连接层和decoder层，输入的残缺图片通过encoder层映射成隐藏特征，然后再通过decoder层得出生成的图片。里面的encoder层是两层以上卷积层加上一层以上池化层，decoder层与encoder对称。</p><p>判别器D：如果只有一个生成器，那么生成的图片将会非常模糊，只有一个粗略的轮廓。因此，采用了两个判别器来对生成图片的细节进行完善，使得生成的图片更加真实。其中，有两个判别器：local discriminator和global discriminator。其中，局部判别器是为了让生成器生成图片中补全的部分更加真实，而整体的判别器是为了让整个生成的图片看起来更加真实。</p><p>Semantic Regularization：前面的两个部分其实就是原始GAN的变形，作者加上后面这一部分的原因是，前面生成的图片虽然整体上轮廓清晰比较真实，但是看上去却不像是人脸的图片。如下图：</p><p><img src="http://img.blog.csdn.net/20170426165055177?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbTBfMzcyMzEwMTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>加上autoencoder结构的semantic parsing network之后，生成的图片会更加和谐：</p><p><img src="http://img.blog.csdn.net/20170426165112396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbTBfMzcyMzEwMTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>d) 损失函数：</strong></p><p>因为模型分为三部分，因此损失函数也有三部分：<br>    整体的损失函数如下：<br>        $$L = L_r + λ_1L_{a1} + λ_2L_{a2} + λ_3L_p$$<br>    其中，<br>    ①$L_r$是生成器的损失，就是输入与输出的二阶范数。<br>    ②$L_{a1}$与$L_{a2}$是两个判别器的损失，其形式跟GAN的判别器损失大同小异：</p><p><img src="http://img.blog.csdn.net/20170426165144818?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbTBfMzcyMzEwMTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>③Lp就是semantic parsing network的损失，就是简单的softmax层损失。<br>    它们前面的参数是用来平衡各个部分损失不同影响的。</p><p><strong>e) 训练步骤：</strong></p><p>与我上一篇看的pix2pix两步走的训练步骤类似，作者采用了三步训练：<br>    ①用生成器直接训练，得到模糊的结果；<br>    ②用局部判别器损失来微调生成模型；<br>    ③联合整体判别器和意义转化网络损失来调整生成模型参数。<br>    这个方法据说可以避免训练开始阶段判别器的作用过强。和我毕设的预训练类似。</p><p><strong>f) 数据集选择：</strong></p><p>作者用到了两个数据集，一个是Celeb A，一个是Helen test数据集，这两个数据集都是面部图片的集合，并且后者还有segment label。以后做实验可以考虑使用。</p><p><strong>g) 实验结果：</strong></p><p>作者将自己模型产生的结果与CE模型产生的结果进行直接对比，并用了三种测量标准测试，证明作者提出的模型效果更好。作者还做了遮挡不同面积的图片，来观察结果的效果，并得出在size是32×32时效果是最好的，因为此时的遮挡面积刚好是面部器官的一部分，比如半只眼睛。</p><h2 id="心得体会"><a href="#心得体会" class="headerlink" title="心得体会"></a>心得体会</h2><p>a)    训练步骤也有一个预训练部分（只训练生成器），和我毕设中对生成器预训练类似。以前一直以为只是用来让后面的训练时间更短，论文中提到这样训练也可以避免在训练的初始阶段，判别器的作用太强，影响训练效果。</p><p>b)    论文对GAN的变形方式值得借鉴，采用两个判别器的模型分别完成对局部和整体的训练，思路很好。<br>d）    作者在模型的最后部分还采用了一个semantic parsing networks结构，这个部分能让整体的输出更加和谐，具体的参考论文还没了解，因此其原理了解很模糊。<br>e)    论文的目的是对独特的目标图片进行补全，以面部图片为例，但是论文一直是以脸部图片作为实验训练集，如果能加入其他比较独特的图片，比如建筑、动物等，可能说服力会更强。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Title: Generative Face Completion&lt;br&gt;Authors:  Li, Yijun; Liu, Sifei; Yang, Jimei; Yang, Ming-Hsuan&lt;br&gt;Publication: eprint arXiv:1704.05838&lt;br&gt;Publication Date:  04/2017&lt;br&gt;Origin:  ARXIV&lt;br&gt;Keywords: Computer Science - Computer Vision and Pattern Recognition&lt;br&gt;Comment: Accepted by CVPR 2017&lt;br&gt;Bibliographic Code: 2017arXiv170405838L &lt;/p&gt;
    
    </summary>
    
      <category term="paper" scheme="http://yoursite.com/categories/paper/"/>
    
    
      <category term="secure" scheme="http://yoursite.com/tags/secure/"/>
    
      <category term="papernotes" scheme="http://yoursite.com/tags/papernotes/"/>
    
  </entry>
  
  <entry>
    <title>《NO Need to Worry about Adversarial Examples in Object Detection in Autonomous Vehicles》论文笔记</title>
    <link href="http://yoursite.com/2017/11/02/%E3%80%8ANO-Need-to-Worry-about-Adversarial-Examples-in-Object-Detection-in-Autonomous-Vehicles%E3%80%8B%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/11/02/《NO-Need-to-Worry-about-Adversarial-Examples-in-Object-Detection-in-Autonomous-Vehicles》论文笔记/</id>
    <published>2017-11-02T02:30:03.000Z</published>
    <updated>2017-11-03T06:38:48.674Z</updated>
    
    <content type="html"><![CDATA[<h2 id="citation"><a href="#citation" class="headerlink" title="citation"></a>citation</h2><p>Lu J, Sibai H, Fabry E, et al. NO Need to Worry about Adversarial Examples in Object Detection in Autonomous Vehicles[J]. 2017.</p><a id="more"></a><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>这篇文章是在<strong>《Adversarial examples in the physical world》</strong>（A. Kurakin, I. J. Goodfellow, and S. Bengio. Adversarial examples in the physical world. CoRR, abs/1607.02533, 2016.）的基础上的进一步研究。因为在传统的对抗攻击构建过程中，对抗perturbation直接和数字图片叠加，作为神经网络模型的输入。Kurakin等人的研究中，对抗的perturbation被生成之后，如果和原始数据叠加后，不是直接作为模型的输入，而是通过相机拍摄的方式输入到模型中。Kurakin等人的研究模拟了实际physical场景下的对抗攻击场景，并且证明了对抗扰动在从对抗样本到拍照后的对抗样本的转化过程中，虽然有相机的noise，仍然是具有对抗性的。<br>同时，也因为<strong>《Concrete Problems for Autonomous Vehicle Safety: Advantages of Bayesian Deep Learning》</strong>（Mcallister R, Gal Y, Kendall A, et al. Concrete Problems for Autonomous Vehicle Safety: Advantages of Bayesian Deep Learning[C]// Twenty-Sixth International Joint Conference on Artificial Intelligence. 2017:4745-4753.）中应用对抗攻击到自动汽车驾驶问题中的挑战问题。<br>另一个相关研究是<strong>《Accessorize to a crime: Real and stealthy attacks on state-ofthe-art face recognition》</strong>（M. Sharif, S. Bhagavatula, L. Bauer, and M. K. Reiter. Accessorize to a crime: Real and stealthy attacks on state-ofthe-art face recognition. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, CCS ’16, pages 1528–1540, New York, NY, USA, 2016. ACM. ），本文的研究证明了在面部识别的实际应用中，通过构建对抗样本，不论是否已知面部识别模型的结构（黑盒或者白盒攻击），都可以在把实际拍摄脸部照片作为模型输入的情况下，极大地影响识别的结果。<br>上述研究都给神经网络模型的实际应用带来了很多concern。</p><p><strong>本文</strong>的研究则是通过一些实验，证实物理世界中的对抗攻击在多种距离和角度效果不佳。在汽车驾驶中交通标示识别实验中，大部分的在汽车行进过程中拍摄对抗样本都被分类模型正确分类。</p><h2 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h2><p>论文的实验方法是使用多种攻击方法测试得到训练好的模型的稳定性。并且训练的模型有两种不同的结构。所用的数据集是width<em>length</em>depth的三维向量。<br>所用的攻击方法有：</p><ul><li>Goodfellow提出的<strong>FGSM</strong><br>[I. J. Goodfellow, J. Shlens, and C. Szegedy. Explaining and harnessing adversarial examples. arXiv preprint arXiv:1412.6572, 2014.]</li><li>Kurakin等人提出的<strong>迭代FGSM</strong><br>[A. Kurakin, I. J. Goodfellow, and S. Bengio. Adversarial examples in the physical world.CoRR, abs/1607.02533, 2016.]</li><li>Szegedy 等提出的<strong>L-BFGS方法</strong><br>[C. Szegedy, W. Zaremba, I. Sutskever, J. Bruna, D. Erhan,I. Goodfellow, and R. Fergus. Intriguing properties of neural networks. arXiv preprint arXiv:1312.6199, 2013.]</li></ul><p>与一般的对抗攻击研究只针对分类问题不同，本文所攻击的目标模型也采用了探测器模型：the <strong>YOLO multiple object detector</strong> [J. Redmon, S. Divvala, R. Girshick, and A. Farhadi. You only look once: Unified, real-time object detection. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pages 779–788, 2016.]<br>本文中classifier与detector的不同之处在于：</p><ul><li><p>classifier使用交叉熵损失函数，衡量输入图片真正的标签($y_{true}$)和输出的one-hot标签($y_{fool}$)的差别。</p></li><li><p>detector中，模型的输出是向量$p_{output}$ ，但是输入样本却没有one-hot标示的标签（因为输入的数据是即时的，一直变化的）。因此实验设置是输入的标签的维度和输出一样，都为 $ l_{p_{output}} $ 。</p></li></ul><p>本文的实验方法与前面提到的攻击算法研究中修改图片不同，关注的是在物理世界的攻击，也就是打印应用这些攻击之后的图片并测试目标模型的稳定性。应用到实际场景时，作者考虑了<strong>拍摄相机与目标的距离</strong>和<strong>拍摄角度</strong>的变量影响。</p><h2 id="experimental-results"><a href="#experimental-results" class="headerlink" title="experimental results"></a>experimental results</h2><ul><li>分析生成的对抗样本结果<br>首先是针对detector目标模型生成的对抗样本：<br><img src="http://ww2.sinaimg.cn/large/0060lm7Tly1fl4pq1sy7pj30gn04raac.jpg" alt="此处输入图片的描述"><br>对比针对traffic sign classifier生成的对抗样本：<br><img src="http://ww1.sinaimg.cn/large/0060lm7Tly1fl4pq38tx7j30gl04wq7c.jpg" alt="此处输入图片的描述"><br>可以发现前者的密度更低。从直观理解也很容易，因为密度越高的对抗扰动可以让探测器的实时监测扰动更加困难。</li><li>整体的对抗样本稳定性的实验结果<br><img src="http://ww3.sinaimg.cn/large/0060lm7Tly1fl4pq4gonwj30n108twfz.jpg" alt="此处输入图片的描述"><br>DR%代表这个stop标志被识别的概率。表格中的Ori指的是完整的图片，Crop则指的是裁剪出只有交通标志的部分。表格的左边是对抗样本在直接作为模型输入时的对抗效果，右边是在现实场景下的实验结果。<br>从表格可以得出下面的结论： </li><li>只关注标志本身的，经过裁剪之后的对抗样本效果更好</li><li>在实际应用场景下，对抗样本的对抗性会随着距离的增加而减弱，模型的识别准确率会更高</li><li>从结果来看对抗攻击方法的效果，L-BFGS整体要差于FGSM方法。</li></ul><p>而这篇文章主要关注的变量，也就是对样本效果影响最大的变量，就是距离的变化。从实验结果中最后两列可以看出，随着距离的增加，对抗样本的对抗性衰减十分明显。但是这种情况也有例外，这说明了对抗扰动的效果在随着距离而变化。因此，在实际应用场景下，探测系统/分类模型只需要调整距离和角度，是可以实现正确识别输入样本的。</p><h2 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h2><p>此外，这两天的对比看文章，和前几天看的《Standard detectors aren’t (currently) fooled by physical adversarial stop signs》比较相似，这一类的文章的内容只是通过实验推翻了前面研究的实验结果。<br>不过本文的观点显然也有一定的缺陷，因为在很多场景下，人们允许的失误率阈值会比较低，甚至不能容忍模型的识别错误。本文只是说明了对抗的效果没有Kurakin等人的研究中那么显著而已。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;citation&quot;&gt;&lt;a href=&quot;#citation&quot; class=&quot;headerlink&quot; title=&quot;citation&quot;&gt;&lt;/a&gt;citation&lt;/h2&gt;&lt;p&gt;Lu J, Sibai H, Fabry E, et al. NO Need to Worry about Adversarial Examples in Object Detection in Autonomous Vehicles[J]. 2017.&lt;/p&gt;
    
    </summary>
    
      <category term="paper" scheme="http://yoursite.com/categories/paper/"/>
    
    
      <category term="secure" scheme="http://yoursite.com/tags/secure/"/>
    
      <category term="papernotes" scheme="http://yoursite.com/tags/papernotes/"/>
    
  </entry>
  
  <entry>
    <title>《Standard detectors aren’t (currently) fooled by physical adversarial stop signs》论文笔记</title>
    <link href="http://yoursite.com/2017/10/31/%E3%80%8AStandard-detectors-aren%E2%80%99t-currently-fooled-by-physical-adversarial-stop-signs%E3%80%8B%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/10/31/《Standard-detectors-aren’t-currently-fooled-by-physical-adversarial-stop-signs》论文笔记/</id>
    <published>2017-10-31T10:54:20.000Z</published>
    <updated>2017-11-03T04:25:12.777Z</updated>
    
    <content type="html"><![CDATA[<h2 id="citation"><a href="#citation" class="headerlink" title="citation"></a>citation</h2><p>Lu J, Sibai H, Fabry E, et al. Standard detectors aren’t (currently) fooled by physical adversarial stop signs[J]. 2017.</p><a id="more"></a><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Evtimov等人在《Robust Physical-World Attacks on Machine Learning Models》提出了RP2算法，可以构建对抗样本，通过添加精心设计的扰动，使交通标示探测器的结果错误，达到对抗攻击的目的。<br>但是本文的作者认为，Evtimov等人在构建对抗样本的实验过程中，对原始图片进行了两种处理：一是对原始图片进行了剪切，二是重新设定了图片的尺寸。本文的作者认为，这样的处理会让模型在训练时能有效的适应视觉角度和规模变化，但是处理之后就消除了这种训练结果。同时，增加的对抗扰动也会有这种视觉角度和规模的变化，因此是否有效需要通过实验验证。不止这种视觉角度和图片规模的改变，针对探测器的对抗攻击也要考虑到大量参数变化（scale; view angle; box shift inside the detector;illumination;等）。<br>另外，对一个classifier和detector进行的对抗攻击应该是有区别的，后者因为不能准确地估计探测边界，所以构造对抗样本也会更加困难。<br>最后，本文中用（YOLO and Faster RCNN）<br><em>[J. Redmon and A. Farhadi. Yolo9000: better, faster, stronger.arXiv preprint arXiv:1612.08242, 2016.]</em><br><em>[S. Ren, K. He, R. Girshick, and J. Sun. Faster r-cnn: Towards real-time object detection with region proposal networks. In Advances in neural information processing systems, pages 91–99, 2015.]</em><br>训练得到的探测器进行测试，发现不会受到对抗攻击的影响。</p><h2 id="Difference-between-Classifiers-and-Detectors"><a href="#Difference-between-Classifiers-and-Detectors" class="headerlink" title="Difference between Classifiers and Detectors"></a>Difference between Classifiers and Detectors</h2><ol><li>两者不会明显区分分类边界，因为对于探测器来说，确定物体边界十分困难。（The key feature of detection systems is that they tend not to get the boxes exactly right）</li><li>原因分析：<ul><li>Close cropping can remove scale and translation effects</li><li>Low resolution boxes</li><li>Cropping and variance</li><li>Cropping and context</li></ul></li></ol><h2 id="experimental-results"><a href="#experimental-results" class="headerlink" title="experimental results"></a>experimental results</h2><p>Evtimov等人的实验主要是两个方面，一种是poster attacks (the stop sign is covered with a poster that looks like a faded stop sign) ，一种是 sticker attacks (the attacker makes stickers placed on particular locations on a stop sign)，因此本文的对照实验采用同样的攻击方式。</p><p>首先是在YOLO探测模型上的探测对抗结果：<br><img src="http://ww1.sinaimg.cn/large/0060lm7Tly1fl1wcs2mi9j30n60llaru.jpg" alt="此处输入图片的描述"><br>然后是在Faster RCNN探测模型上的探测结果：<br><img src="http://ww1.sinaimg.cn/large/0060lm7Tly1fl1w9z0qr9j30n10lrh3u.jpg" alt="此处输入图片的描述"><br>从这两个结果上来看，原来的对抗攻击的成功率已经下降到0，说明了Evtimov等人提出的对抗样本构建方法失效了。</p><h2 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h2><p>探测器并不能声称完全免疫物理对抗攻击，然而目前没有证据证明物理对抗样本能对detector产生效果。<br>这篇文章实验主要就是实验部分，通过实验证明了Evtimov的研究的不充分，说明了实际中，对探测器的攻击的存在性还待进一步研究。找到这种攻击的存在还有很大的挑战。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;citation&quot;&gt;&lt;a href=&quot;#citation&quot; class=&quot;headerlink&quot; title=&quot;citation&quot;&gt;&lt;/a&gt;citation&lt;/h2&gt;&lt;p&gt;Lu J, Sibai H, Fabry E, et al. Standard detectors aren’t (currently) fooled by physical adversarial stop signs[J]. 2017.&lt;/p&gt;
    
    </summary>
    
      <category term="paper" scheme="http://yoursite.com/categories/paper/"/>
    
    
      <category term="secure" scheme="http://yoursite.com/tags/secure/"/>
    
      <category term="papernotes" scheme="http://yoursite.com/tags/papernotes/"/>
    
  </entry>
  
  <entry>
    <title>搭建博客时候问题小记</title>
    <link href="http://yoursite.com/2017/10/31/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%97%B6%E5%80%99%E9%97%AE%E9%A2%98%E5%B0%8F%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/10/31/搭建博客时候问题小记/</id>
    <published>2017-10-31T06:48:20.000Z</published>
    <updated>2017-11-03T14:53:31.281Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong>汇总搭建博客遇见的几个问题<br><a id="more"></a></p><h2 id="错误1"><a href="#错误1" class="headerlink" title="错误1"></a>错误1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;first commit&quot;</span><br><span class="line">On branch master</span><br><span class="line">Untracked files:</span><br><span class="line">        .gitignore</span><br><span class="line">        _config.yml</span><br><span class="line">        git</span><br><span class="line">        git.pub</span><br><span class="line">        package-lock.json</span><br><span class="line">        package.json</span><br><span class="line">        scaffolds/</span><br><span class="line">        source/</span><br><span class="line">        themes/</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present</span><br></pre></td></tr></table></figure><p>这个错误原因有两个：</p><ol><li>已经存在的项目？</li><li>没有把需要提交的文件加载进来，所以需要用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add （文件名）</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="错误2"><a href="#错误2" class="headerlink" title="错误2"></a>错误2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: remote origin already exists.</span><br></pre></td></tr></table></figure><p>用到的解决办法：</p><ol><li><p>删除远程仓库，再添加远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$git remote rm origin</span><br><span class="line"></span><br><span class="line">$git remote add origin git@github.com:wufans/wufans.github.io.git</span><br></pre></td></tr></table></figure></li><li><p>修改git的config文件的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$vi .git/config</span><br></pre></td></tr></table></figure></li></ol><p>删除[remote “origin”]</p><hr><h2 id="错误3"><a href="#错误3" class="headerlink" title="错误3"></a>错误3</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">To github.com:wufans/wufans.github.io.git</span><br><span class="line"> ! [rejected]        master -&gt; master (non-fast-forward)</span><br><span class="line"> &apos;git@github.com:wufans/wufans.github.io.git&apos;</span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">hint: &apos;git pull ...&apos;) before pushing again.</span><br></pre></td></tr></table></figure><p>这个方法就是因为本地仓库和github上面仓库的内容有冲突导致的<br>我用的解决办法是删除了原来的repository，重新建立了一个仓库，问题解决。</p><hr><h2 id="创建流量统计功能的方法"><a href="#创建流量统计功能的方法" class="headerlink" title="创建流量统计功能的方法"></a>创建流量统计功能的方法</h2><p><a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">参考博客</a></p><hr><h2 id="附加功能的添加"><a href="#附加功能的添加" class="headerlink" title="附加功能的添加"></a>附加功能的添加</h2><p><a href="http://blog.csdn.net/linshuhe1/article/details/52424573" target="_blank" rel="noopener">参考博客</a></p><hr><h2 id="解决公式显示不正常的问题"><a href="#解决公式显示不正常的问题" class="headerlink" title="解决公式显示不正常的问题"></a>解决公式显示不正常的问题</h2><p><a href="http://blog.csdn.net/emptyset110/article/details/50123231" target="_blank" rel="noopener">参考博客</a></p><hr><h2 id="hexo设置侧边栏头像"><a href="#hexo设置侧边栏头像" class="headerlink" title="hexo设置侧边栏头像"></a>hexo设置侧边栏头像</h2><p>编辑站点的 _config.yml，新增字段 avatar， 值设置成头像的链接地址。</p><p>其中，头像的链接地址可以是：</p><p>完整的互联网 URL，例如：<a href="https://avatars1.githubusercontent.com/u/32269?v=3&amp;s=460" target="_blank" rel="noopener">https://avatars1.githubusercontent.com/u/32269?v=3&amp;s=460</a></p><p>站点内的地址，例如：</p><p>/uploads/avatar.jpg 需要将你的头像图片放置在 站点的 source/uploads/（可能需要新建uploads目录）<br>/images/avatar.jpg 需要将你的头像图片放置在 主题的 source/images/ 目录下。</p><hr><h2 id="hexo部署失败，不能连接github的解决"><a href="#hexo部署失败，不能连接github的解决" class="headerlink" title="hexo部署失败，不能连接github的解决"></a>hexo部署失败，不能连接github的解决</h2><p>一直在解决这个问题，修改了本地文件的几个配置之后，突然发现生成的博客不能直接push到github上了，显示错误<br><img src="http://ww3.sinaimg.cn/large/0060lm7Tly1fkveprebuhj30if0bq754.jpg" alt="此处输入图片的描述"><br>但是用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></p><p>部署到本地的时候是没有问题的。<br>然后用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@gihub.com</span><br></pre></td></tr></table></figure></p><p>测试连接也出现了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh_exchange_identification: read:Connection reset by peer</span><br></pre></td></tr></table></figure></p><p>和<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection reset by 192.30.253.112 port 22</span><br></pre></td></tr></table></figure></p><p>这样的错误<br>尝试了以下解决办法：</p><ol><li>因为前几次修改了hosts文件解决github不能加载CSS的问题，让电脑解析github的域名时用的是自定义的IP，所以可能有这个原因，因此在hosts里面注释掉了修改的部分，然后刷新DNS缓存<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /flushdns</span><br><span class="line">#这里还遇到了ipconfig和ping不是一个命令的错误，需要配置环境变量path</span><br><span class="line">#%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem</span><br></pre></td></tr></table></figure></li></ol><p>最后发现没用。</p><ol><li>删除了github上面的ssh配置，重新配置了github服务器端与本地的ssh秘钥，然后再使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@gihub.com</span><br></pre></td></tr></table></figure></li></ol><p>结果能连上了，但是再用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></p><p>之后，又报了刚才的错误，而且再测试与github上面的连接居然也出错了~</p><ol><li>俗话说，重启治百病，于是重启了一下————是的，没用</li><li>用网上的解决办法，可能是网络防火墙设置的原因，用手机给电脑开热点再测试连接，结果也没用<br>最后打算第二天重新部署博客了，然后奇迹发生了，起床之后再测试链接，work~</li></ol><hr><h2 id="Github不能访问、不能正常加载CSS的解决"><a href="#Github不能访问、不能正常加载CSS的解决" class="headerlink" title="Github不能访问、不能正常加载CSS的解决"></a>Github不能访问、不能正常加载CSS的解决</h2><p>修改了windows的hosts文件之后，经常会出现github访问异常，页面的CSS样式无法加载等的情况。<br><strong>解决办法</strong><br>给hosts文件增加github的CDN fastly.net,跳过域名解析，直接通过IP访问github。<br>在hosts文件下增加一行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">185.31.17.184 github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure></p><font color="red"><strong>问题</strong></font> <p>使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></p><p>部署博客时，出现下列错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fatal: TaskCanceledException encountered.</span><br><span class="line">   ▒▒ȡ▒▒һ▒▒▒▒▒▒</span><br><span class="line">bash: /dev/tty: No such device or address</span><br><span class="line">error: failed to execute prompt script (exit code 1)</span><br><span class="line">fatal: could not read Username for &apos;https://github.com&apos;: No error</span><br><span class="line">FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class="line">Error: fatal: TaskCanceledException encountered.</span><br><span class="line">   ��ȡ��һ������</span><br><span class="line">bash: /dev/tty: No such device or address</span><br><span class="line">error: failed to execute prompt script (exit code 1)</span><br><span class="line">fatal: could not read Username for &apos;https://github.com&apos;: No error</span><br><span class="line"></span><br><span class="line">    at ChildProcess.&lt;anonymous&gt; (D:\blog\GIT\hexo\node_modules\hexo-util\lib\spawn.js:37:17)</span><br><span class="line">    at emitTwo (events.js:125:13)</span><br><span class="line">    at ChildProcess.emit (events.js:213:7)</span><br><span class="line">    at ChildProcess.cp.emit (D:\blog\GIT\hexo\node_modules\cross-spawn\lib\enoent.js:40:29)</span><br><span class="line">    at maybeClose (internal/child_process.js:927:16)</span><br><span class="line">    at Process.ChildProcess._handle.onexit (internal/child_process.js:211:5)</span><br></pre></td></tr></table></figure></p><font color="red"><strong>解决</strong></font><p>如果开启了本地预览，先关闭<br>然后用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure></p><p>清空缓存，再重新生成静态文件并部署，问题解决~</p><h2 id="另外"><a href="#另外" class="headerlink" title="另外"></a><big><font color="red">另外</font></big></h2><p>用了上面的方法之后还出现了这个问题的话，<big><font color="red">重启</font></big>一下电脑~~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;汇总搭建博客遇见的几个问题&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>《Robust Physical-World Attacks on Machine Learning Models》论文笔记</title>
    <link href="http://yoursite.com/2017/10/30/%E3%80%8ARobust-Physical-World-Attacks-on-Machine-Learning-Models%E3%80%8B%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/10/30/《Robust-Physical-World-Attacks-on-Machine-Learning-Models》论文笔记/</id>
    <published>2017-10-30T15:09:10.000Z</published>
    <updated>2017-11-03T06:02:34.926Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Title:</strong> Robust Physical-World Attacks on Machine Learning Models<br><strong>Authors:</strong> Evtimov, Ivan; Eykholt, Kevin; Fernandes, Earlence; Kohno, Tadayoshi; Li, Bo; Prakash, Atul; Rahmati, Amir; Song, Dawn<br><strong>Publication:</strong> eprint arXiv:1707.08945<br><strong>Publication Date:</strong> 07/2017<br><strong>Origin:</strong> ARXIV<br><strong>Keywords:</strong> Computer Science - Cryptography and Security, Computer Science - Learning<br><strong>Bibliographic Code:</strong> 2017arXiv170708945E<br><a id="more"></a></p><h2 id="citation"><a href="#citation" class="headerlink" title="citation"></a>citation</h2><p>Evtimov I, Eykholt K, Fernandes E, et al. Robust Physical-World Attacks on Machine Learning Models[J]. 2017.</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>&emsp;最近的研究中，许多对抗样本构造方法在真实自然世界效果不好。已有的对抗攻击研究在现实世界中，往往不能使分类模型误分类，或者只在非常有限的情况比如复杂原始图像经修改后打印出来才能达到对抗攻击的目的。<br>&emsp;本论文要点如下：</p><ol><li>提出Robust Physical Perturbations(RP2)算法，能产生鲁棒且自然有效的对抗扰动。</li><li>使用RP2算法用两种方式构造对抗攻击：<br>– subtle perturbations：对整个标志进行微小的、很难探测到的改动。把整个受到攻击后的图片打印后覆盖到原标志上面，尺寸和原图一样。<br>– camouflage perturbations：以涂鸦或艺术画的形式对原图进行可见的改变。攻击者直接将扰动攻击打印出来，然后贴到已经存在的标志上面。</li><li>因为目前缺乏衡量自然界对抗攻击效果的标准方法，因此论文提出了一种评估方法。</li></ol><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><ul><li>提出在physical world也有效的对抗样本生成算法的原因：</li></ul><ol><li>一方面，<strong>《No need to worry about adversarial examples in object detection in autonomous vehicles》</strong>（J. Lu, H. Sibai, E. Fabry, and D. Forsyth, “No need to worry about<br>adversarial examples in object detection in autonomous vehicles,” arXiv<br>preprint arXiv:1707.03501, 2017.）研究FGSM和L-BFGS算法，发现生成的路面警示标志的对抗样本在多种观察条件下效果很差（改变角度和距离）。另一方面，<strong>《Synthesizing robust adversarial examples》</strong>（A. Athalye and I. Sutskever, “Synthesizing robust adversarial examples,”arXiv preprint arXiv:1707.07397, 2017.）说明可以通过更好的对抗样本算法来生成扰动图片，在图片被打印出来用相机来观察时在各种情况下都是鲁棒的。</li><li>在针对分类的对抗攻击可行性上面，仍然有许多遗留问题。首先，给目标的背景增加扰动不可实现。第二，相比于目前所用的复杂图片，将扰动隐藏在像路标这种简单的目标中是更加困难的。第三，对于难以感知的扰动， 还有额外的物理上的限制，因为轻微的扰动可能让相机在多种自然情况下不能获取这些扰动信息（如长距离和多角度情况下）。</li><li>本论文的主要目的：对真实世界目标构建robust且轻微的扰动是否可行。</li></ol><ul><li>需要解决的问题：</li></ul><ol><li>汽车中的相机与路标的距离一直在变化</li><li>汽车中的探测相机与路标的角度一直在变化</li><li>光线强弱变化</li><li>在路标或者汽车上的遮挡物</li></ol><h2 id="Related-work"><a href="#Related-work" class="headerlink" title="Related work"></a>Related work</h2><p>这一部分先总结了三种对抗样本的生成方法：</p><ul><li>（I. J. Goodfellow, J. Shlens, and C. Szegedy, <strong>“Explaining and harnessing adversarial examples,”</strong> arXiv preprint arXiv:1412.6572, 2014.） 提出的FGSM方法。</li><li>（N. Carlini and D. Wagner, <strong>“Towards evaluating the robustness of neural networks,”</strong> in Security and Privacy (SP), 2017 IEEE Symposium on.IEEE, 2017, pp.39–57.）提出的基于迭代优化算法在一定限制下查找perturbation。</li><li>（S.-M. Moosavi-Dezfooli, A. Fawzi, O. Fawzi, and P. Frossard, <strong>“Universal adversarial perturbations,”</strong> arXiv preprint arXiv:1610.08401, 2016.）提出的能应用到黑盒攻击中的无目标攻击，在各种对抗图片生成上都有效果。</li></ul><p>这三种方法都假设能得到输入向量的数字层面的特征，这在自然情况自动汽车背景下不适用。同时，它们都需要perturbation程度比较小且不可见，因为直接以数字向量作为神经网络输入时，这种微小的perturbation不会被破坏。但是，如果把修改后的样本打印到纸张上，那么这种在自然界重建perturbation的过程就会在每个步骤造成信息的损失。因此（J. Lu, H. Sibai, E. Fabry, and D. Forsyth, <strong>“No need to worry about adversarial examples in object detection in autonomous vehicles,”</strong> arXiv preprint arXiv:1707.03501, 2017.）证实了这些方法在真实世界中效果不好。</p><p>然后介绍了本论文中两种攻击方式的由来：</p><ul><li>Subtle Perturbations:（A. Kurakin, I. J. Goodfellow, and S. Bengio, <strong>“Adversarial examples in the physical world,”</strong> CoRR, vol. abs/1607.02533, 2016. [Online].Available: <a href="http://arxiv.org/abs/1607.02533）里面修改控制图片的数字表示，然后将图片打印出来，通过手机相机来读取图片并作为分类器的输入。" target="_blank" rel="noopener">http://arxiv.org/abs/1607.02533）里面修改控制图片的数字表示，然后将图片打印出来，通过手机相机来读取图片并作为分类器的输入。</a></li><li>Camouflage Perturbations：（<strong>“Best practices for developing with kairos,”</strong> 2017. [Online]. Available:<a href="https://www.kairos.com/docs/api/best-practices）和（M" target="_blank" rel="noopener">https://www.kairos.com/docs/api/best-practices）和（M</a>. Sharif, S. Bhagavatula, L. Bauer, and M. K. Reiter, <strong>“Accessorize to a crime: Real and stealthy attacks on state-of-the-art face recognition,”</strong> in Proceedings of the 23rd ACM SIGSAC Conference on Computer and Communications Security, Oct. 2016. [Online]. Available: <a href="https://www.ece.cmu.edu/~lbauer/papers/2016/ccs2016-face-recognition.pdf）中显示了有着对抗perturbation的眼睛能够欺骗面部识别系统，与本论文的目的一致——通过重建物理目标，给已经存在的目标加入新的对象能够欺骗深度神经网络。与面部识别的不同之处仅仅在于环境不同。" target="_blank" rel="noopener">https://www.ece.cmu.edu/~lbauer/papers/2016/ccs2016-face-recognition.pdf）中显示了有着对抗perturbation的眼睛能够欺骗面部识别系统，与本论文的目的一致——通过重建物理目标，给已经存在的目标加入新的对象能够欺骗深度神经网络。与面部识别的不同之处仅仅在于环境不同。</a></li></ul><h2 id="Experiment"><a href="#Experiment" class="headerlink" title="Experiment"></a>Experiment</h2><p>数据集：LISA数据集，包含47种不同的路标图片，在本实验中重设尺寸为32×32<br>    实验用TensorFlow工具构建分类器，神经网络结构为：三成带有全连接层的卷积层。最终的分类器准确率为91%。<br>攻击过程的选择，本实验只能修改测试集数据，即是<strong>evasion attacks</strong>。<br>攻击流程： </p><pre><code>1. 得到没有对抗perturbation的干净目标路标图2. 预处理路标图（维度等）将之作为分类器的输入3. 用攻击算法处理分类器和提取的路标图片4. 用映射函数在路标上输出相应的对抗perturbation的物理位置5. 构建数字对抗perturbation，并基于上面函数的输出将这个改动应用到物理目标中。</code></pre><p>自然对抗perturbation的评估方法：<br>    受自然情况下环境条件、空间限制、样本构建误差、维度变化和不可探测的物理限制等影响，在评估对抗样本效果时，论文考虑了三个主要的方面：<strong>距离、角度和维度</strong>。 </p><p>Robust Physical Perturbations(RP2)算法：<br>    是一种优化的扰动生成方法，在untarget对抗攻击时，目标函数为<br>    $$argmin_λ||δ||<em>p − J(fθ(x + δ),y)$$<br>    即是让加入扰动后的输出损失越大越好。<br>    在target对抗攻击时，目标函数为<br>   $$argmin</em>λ||δ||<em>p + J(f</em>θ(x + δ),y_0)$$<br>   即是让加入扰动后输出损失与特定目标差别越小越好。<br>    其中λ都代表对扰动规模的限制。</p><h2 id="Future-work"><a href="#Future-work" class="headerlink" title="Future work"></a>Future work</h2><ol><li>因为论文用的交通标志比较有限，考虑使用更多的交通标志完成target classification attack。</li><li>增加一种扰动补偿的步骤到已有的对抗攻击生成流程中。</li><li>在更多现实场景下测试算法，比如标志遮挡。</li><li>因为自动汽车的视觉次级系统主要有两个组成部分：一个是目标探测器，一个是分类器。本文主要是研究了对分类器的攻击，但是对目标探测器的攻击也可以达到攻击目的。（P. Viola and M. Jones, <strong>“Rapid object detection using a boosted cascade of simple features,”</strong> in Computer Vision and Pattern Recognition, 2001.CVPR 2001. Proceedings of the 2001 IEEE Computer Society Conference on, vol. 1. IEEE, 2001, pp. I–I.）和（P. F. Felzenszwalb, R. B. Girshick, D. McAllester, and D. Ramanan, <strong>“Object detection with discriminatively trained part-based models,”</strong> IEEE transactions on pattern analysis and machine intelligence, vol. 32, no. 9,<br>pp. 1627–1645, 2010.）</li></ol><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>还没有实验证明，对原始数据perturbation的程度应该是多少才不至于被人类观察者注意到。</li><li>构建perturbation的时候，如果只讲这种对抗攻击的信息体现在黑白灰度层面而不是彩色，可能会让生成的对抗样本更加robust。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Title:&lt;/strong&gt; Robust Physical-World Attacks on Machine Learning Models&lt;br&gt;&lt;strong&gt;Authors:&lt;/strong&gt; Evtimov, Ivan; Eykholt, Kevin; Fernandes, Earlence; Kohno, Tadayoshi; Li, Bo; Prakash, Atul; Rahmati, Amir; Song, Dawn&lt;br&gt;&lt;strong&gt;Publication:&lt;/strong&gt; eprint arXiv:1707.08945&lt;br&gt;&lt;strong&gt;Publication Date:&lt;/strong&gt; 07/2017&lt;br&gt;&lt;strong&gt;Origin:&lt;/strong&gt; ARXIV&lt;br&gt;&lt;strong&gt;Keywords:&lt;/strong&gt; Computer Science - Cryptography and Security, Computer Science - Learning&lt;br&gt;&lt;strong&gt;Bibliographic Code:&lt;/strong&gt; 2017arXiv170708945E&lt;br&gt;
    
    </summary>
    
      <category term="paper" scheme="http://yoursite.com/categories/paper/"/>
    
    
      <category term="secure" scheme="http://yoursite.com/tags/secure/"/>
    
      <category term="papernotes" scheme="http://yoursite.com/tags/papernotes/"/>
    
  </entry>
  
  <entry>
    <title>《Concrete Problems for Autonomous Vehicle Safety:Advantages of Bayesian Deep Learning》论文笔记</title>
    <link href="http://yoursite.com/2017/10/29/%E3%80%8AConcrete-Problems-for-Autonomous-Vehicle-Safety-Advantages-of-Bayesian-Deep-Learning%E3%80%8B%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/10/29/《Concrete-Problems-for-Autonomous-Vehicle-Safety-Advantages-of-Bayesian-Deep-Learning》论文笔记/</id>
    <published>2017-10-29T15:53:55.000Z</published>
    <updated>2017-10-31T16:19:29.900Z</updated>
    
    <content type="html"><![CDATA[<p>Rowan McAllister, Yarin Gal†, Alex Kendall, Mark van der Wilk, Amar Shah, Roberto Cipolla, Adrian Weller†<br>Department of Engineering, University of Cambridge, UK† also Alan Turing Institute, London, UK，<br>Proceedings of the Twenty-Sixth International Joint Conference on Artificial Intelligence (IJCAI-17)<br><a id="more"></a></p><h2 id="Citation"><a href="#Citation" class="headerlink" title="Citation"></a>Citation</h2><p>Mcallister R, Gal Y, Kendall A, et al. Concrete Problems for Autonomous Vehicle Safety: Advantages of Bayesian Deep Learning[C]// Twenty-Sixth International Joint Conference on Artificial Intelligence. 2017:4745-4753.</p><p>##概要##<br>这篇论文主要讲的是<strong>安全的实际应用</strong>。<br>在<strong>自动汽车领域</strong>，软件方面就是通过一系列流程，将各种传感器的输入链接到发动机的输出上。而在这种传播过程中，如果有信息的损失就会有差错（比如将80%几率不会相撞直接判断为不会相撞） 。各个部分的差错也会被依次累积传递下去，最终输出错误的结果。<br>同时，要让客户信任自动汽车，并使用这个系统，必须在三个方面开展研究：自动汽车的安全性（通过量化每个部分输出的不确定性，并且将这个不确定性也顺着流程传递下去）、可解释性（向客户解释自动汽车所看到的，并且为什么作出一系列决策，从而让客户安心）、顺从性（指的是让客户在自动汽车驾驶过程中维持对汽车的控制）。</p><p>自动汽车软件系统由多个单独的子系统组合而成。主要有object detection and localisation components负责场景识别，scene prediction component负责根据场景来预测汽车的运动，最后，decision components做出汽车最终动作决定，控制发动机完成汽车驾驶。而目前，这三个方面渐渐使用深度学习工具搭建，比传统的方法在多个任务上具有更好地效果。但是，基于深度学习的自动汽车软件系统也有许多挑战。正如容易受到对抗样本的干扰，从而做出错误的决断。</p><h2 id="提升自动汽车可靠性的三个方面"><a href="#提升自动汽车可靠性的三个方面" class="headerlink" title="##提升自动汽车可靠性的三个方面##"></a>##提升自动汽车可靠性的三个方面##</h2><h2 id="Safety"><a href="#Safety" class="headerlink" title="Safety"></a>Safety</h2><p>在自动汽车的软件部分由多个单独的部分联合构成。为了提升系统的安全性，提升每个部分是必要但不是充分的，因为单个部分的错误会随着整体流程而累积。因此，为了避免最终输出的结果出现错误，应该把每个部分的错误和不确定性都体现在其输出上，最终的输出也就体现了所有部分的不确定性。<br>而传播这种不确定性主要有两种方法：一种是贝叶斯概率理论，一种是ensembling。而利用贝叶斯工具掌握这种不确定性在传统自动汽车研究中已经使用过。但是与深度学习系统结合，还存在很多困难。<br>因此，论文提出了贝叶斯深度学习（Bayesian Deep Learning）模型。<br><img src="http://img.blog.csdn.net/20170808234621800?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbTBfMzcyMzEwMTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="此处输入图片的描述"></p><p>如上图，利用BDL模型的自动汽车，可以得到汽车有可能会相撞的结果，从而采取相应的停车措施。<br>而在自动汽车的各个部分，都采用BDL工具。</p><p>##Interpretability##<br>解释性算法能让客户掌握自动汽车作的每一个决策以及得到的输出。这种掌握可以采取三种形式：图像、文字语言或者听觉。这样，每一个客户对自动汽车整个系统就有了比较直观的理解。比如，可以通过在路程中询问：“你为什么突然左转”，自动汽车就会给出作出左转决策的原因。而对这个问题的探索，有两个技术方面：model saliency 和 auxiliary outputs。前者根据图片显示与系统决策关联最显著的部分；后者是根据传感器的输入得到辅助输出，显示系统的控制信息。</p><h2 id="Compliance"><a href="#Compliance" class="headerlink" title="Compliance"></a>Compliance</h2><p>这部分即是让自动汽车也能服从人的命令，而不是一味按照自己的算法模型作出决策。这样也能让客户感觉可靠。而自动汽车服从命令主要是按照两个方面：passenger reassurance和 law abiding。前者是根据乘客的需要改变决策，后者是所有的决策要在法律允许的范围内，要满足社会常识的前提。</p><p>这篇论文和对抗攻击的关联不大，只是给针对各种攻击的defence提供了一种<strong>利用贝叶斯公式传递不确定性</strong>的思想。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Rowan McAllister, Yarin Gal†, Alex Kendall, Mark van der Wilk, Amar Shah, Roberto Cipolla, Adrian Weller†&lt;br&gt;Department of Engineering, University of Cambridge, UK† also Alan Turing Institute, London, UK，&lt;br&gt;Proceedings of the Twenty-Sixth International Joint Conference on Artificial Intelligence (IJCAI-17)&lt;br&gt;
    
    </summary>
    
      <category term="paper" scheme="http://yoursite.com/categories/paper/"/>
    
    
      <category term="secure" scheme="http://yoursite.com/tags/secure/"/>
    
      <category term="papernotes" scheme="http://yoursite.com/tags/papernotes/"/>
    
  </entry>
  
  <entry>
    <title>范数总结</title>
    <link href="http://yoursite.com/2017/10/26/%E8%8C%83%E6%95%B0%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/10/26/范数总结/</id>
    <published>2017-10-26T02:32:21.000Z</published>
    <updated>2017-11-03T06:02:18.841Z</updated>
    
    <content type="html"><![CDATA[<p>关于范数的知识总结<br><a id="more"></a></p><h2 id="什么是范数"><a href="#什么是范数" class="headerlink" title="什么是范数"></a>什么是范数</h2><hr><p>范数是一种强化了的距离概念。他在定义上比距离多了一条数乘的运算法则。<br>数学上，范数包括向量范数和矩阵范数。<strong>向量范数</strong>表征向量空间中向量的大小，矩阵范数表征矩阵引起变化的大小。一种非严密的解释就是，对应向量范数，向量空间中的向量都是有大小的，这个大小如何度量，就是用范数来度量的，不同的范数都可以来度量这个大小。对于<strong>矩阵范数</strong>，已知AX=B，可以将向量X变化为B，而矩阵范数就是来度量这个变化大小的。</p><h2 id="L-P范数"><a href="#L-P范数" class="headerlink" title="L-P范数"></a>L-P范数</h2><hr><p>L-P范数不是一个范数，而是一组范数。定义如下：</p><p>$$L_p = \sqrt[p]{\sum_{i=1}^n x_i^p}, x=(x_1,x_2,…,x_n)$$</p><h2 id="L0范数"><a href="#L0范数" class="headerlink" title="L0范数"></a>L0范数</h2><hr><p>上式中，当p=0时，就是L0范数。L0范数并不是一个真正的范数，它主要用来度量向量中非零元素的个数。L-0的定义为：</p><p>$$||x|| = \sqrt[0]{\sum_1^n{x_i^0}},x=(x_1,x_2,…,x_n)$$</p><p>其优化问题为：</p><p>$$min||x||_0 \<br>s.t. Ax=b$$</p><p>在实际应用中，由于L0范数本身不容易有一个好的数学表示形式，给出上面问题的形式化表示是一个很难的问题，故被人认为是一个NP难问题。所以在实际情况中，L0的最优问题会被放宽到L1或L2下的最优化。</p><h2 id="L-1范数"><a href="#L-1范数" class="headerlink" title="L-1范数"></a>L-1范数</h2><hr><p>L1范数是我们经常见到的一种范数，它的定义如下：</p><p>$$||x||_1=\sum_i{|x_i|}$$</p><p>表示向量x中非零元素的绝对值之和。<br>L1范数有许多别称，比如<strong>曼哈顿距离，最小绝对误差</strong>等等。使用L1范数可以度量两个向量间的差异，如绝对误差和（Sum of Absolute Difference）：</p><p>$$SAD(x_1,x_2) = \sum_i{|x_{1i}-x_{2i}|}$$</p><p>对于L1范数，他的优化问题如下：</p><p>$$min||x||_1<br>s.t. Ax = b$$</p><p>由于L1范数的天然性质，对L1优化的解是一个稀疏解，因此L1范数也被叫做稀疏规则算子。通过L1可以实现特征的稀疏，去掉一些没有信息的特征，例如在对用户的电影爱好做分类的时候，用户有100个特征，可能只有十几个特征是对分类有用的，大部分特征如身高体重等可能都是无用的，利用L1范数就可以过滤掉。</p><h2 id="L2范数"><a href="#L2范数" class="headerlink" title="L2范数"></a>L2范数</h2><hr><p>我们来度量欧式距离的就是一种L2范数，它的定义如下：</p><p>$$||x||_2 = \sqrt{\sum_i{x_i^2}}$$</p><p>表示向量元素的平方和再开平方。<br>L2也可以用来度量两个向量之间的差异，如平方差和（Sum of Squared Difference）：</p><p>$$SSD(x_1,x_2) = \sum_i{(x_{1i}-x_{2i})^2}$$</p><p>对于L2范数，它的优化问题如下：</p><p>$$min||x||_2<br>s.t. Ax = b$$</p><p>L2范数通常会被用来做优化目标的正则化项，防止模型为了迎合训练集而过于复杂造成过拟合的情况，从而提高模型的泛化能力。</p><h2 id="L-∞范数"><a href="#L-∞范数" class="headerlink" title="L-∞范数"></a>L-∞范数</h2><hr><p>当P=∞时，也就是L-∞范数，它主要被用来度量向量元素的最大值。用上面的L-P定义可以得到的L∞的定义为：</p><p>$$||x||_∞ = \sqrt[∞]{\sum_1^n{x_i^∞}},x=(x_1,x_2,…,x_n)$$</p><p>通常情况下，大家用的都是：</p><p>$$||x||_∞ = max(|x_i|)$$</p><p>来表示L-∞范数。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于范数的知识总结&lt;br&gt;
    
    </summary>
    
      <category term="math" scheme="http://yoursite.com/categories/math/"/>
    
    
      <category term="notes" scheme="http://yoursite.com/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>JAVA基础总结</title>
    <link href="http://yoursite.com/2017/10/25/JAVA%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/10/25/JAVA基础总结/</id>
    <published>2017-10-25T07:37:30.000Z</published>
    <updated>2017-11-05T07:52:05.437Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要</strong> ：java学习笔记<br><a id="more"></a></p><p><strong>正文:</strong></p><ol><li>default关键字的两种用法</li></ol><hr><pre><code>    1).在switch语句中，如果没有任何case表达式与开关值匹配，则控制传递给跟在可选default标签后的语句。如果没有default标签，则控制传递到switch以外    2).在泛型类和泛型方法中，在预先未知T是引用类型还是值类型，如果他是值类型，则他是数值还是结构，在这种情况下，为对象实例赋初值。使用 default 关键字，此关键字对于引用类型会返回空，对于数值类型会返回零。对于结构，此关键字将返回初始化为零或空的每个结构成员，具体取决于这些结构是值类型还是引用类型。</code></pre><ol><li>synchronized关键字</li></ol><hr><pre><code>    synchronized 关键字，代表这个方法加锁,相当于不管哪一个线程A每次运行到这个方法时,都要检查有没有其它正在用这个方法的线程B（或者C D等）,有的话要等正在使用这个方法的线程B（或者C D）运行完这个方法后再运行此线程A,没有的话,直接运行 它包括两种用法：synchronized 方法和 synchronized 块。分为synchronized方法和synchronized块</code></pre><ol><li>instanceof关键字</li></ol><hr><pre><code>    instanceof是Java的一个二元操作符，和==，&gt;，&lt;是同一类东东。由于它是由字母组成的，所以也是Java的保留关键字。它的作用是测试它左边的对象是否是它右边的类的实例，返回boolean类型的数据。    一般在使用无泛型的集合（List、set等）时，比较多的使用  instanceof  ，由于集合能够存各种对象，所以在读取时一般要进行相应的判断。</code></pre><ol><li>native关键字</li></ol><hr><pre><code>    简单地讲，一个Native Method就是一个java调用非java代码的接口。一个Native Method是这样一个java的方法：该方法的实现由非java语言实现，比如C。这个特征并非java所特有，很多其它的编程语言都有这一机制，比如在C＋＋中，你可以用extern &quot;C&quot;告知C＋＋编译器去调用一个C的函数。    &quot;A native method is a Java method whose implementation is provided by non-java code.&quot;在定义一个native method时，并不提供实现体（有些像定义一个java interface），因为其实现体是由非java语言在外面实现的。</code></pre><ol><li>strictfp关键字</li></ol><hr><pre><code>strictfp, 即 strict float point(精确浮点)。strictfp关键字可应用于类、接口或方法。使用strictfp关键字声明一个方法时，该方法中所有的float和double表达式都严格遵守FP-strict的限制,符合IEEE-754规范。当对一个类或接口使用strictfp关键字时，该类中的所有代码，包括嵌套类型中的初始设定值和代码，都将严格地进行计算。严格约束意味着所有表达式的结果都必须是 IEEE 754算法对操作数预期的结果，以单精度和双精度格式表示。如果你想让你的浮点运算更加精确，而且不会因为不同的硬件平台所执行的结果不一致的话，可以用关键字strictfp.</code></pre><ol><li>transient关键字</li></ol><hr><pre><code>    java 的transient关键字为我们提供了便利，你只需要实现Serilizable接口，将不需要序列化的属性前添加关键字transient，序列化对象的时候，这个属性就不会序列化到指定的目的地中。    1） 一旦变量被transient修饰，变量将不再是对象持久化的一部分，该变量内容在序列化后无法获得访问。    2） transient关键字只能修饰变量，而不能修饰方法和类。注意，本地变量是不能被transient关键字修饰的。变量如果是用户自定义类变量，则该类需要实现Serializable接口。    3） 被transient关键字修饰的变量不再能被序列化，一个静态变量不管是否被transient修饰，均不能被序列化。</code></pre><ol><li>volatile关键字</li></ol><hr><pre><code>用volatile修饰的变量，线程在每次使用变量的时候，都会读取变量修改后的值。</code></pre><ol><li>数据类型：</li></ol><hr><pre><code>基本数据类型    数值型        整数型        浮点型    字符型    布尔型引用数据类型    类    接口    数组</code></pre><ol><li>&amp;&amp;有短路效果</li></ol><hr><ol><li>a = (a + b) - (b = a);</li></ol><hr><ol><li>java中的内存分配</li></ol><hr><pre><code>栈 存储局部变量堆 存储new出来的东西方法区 (面向对象部分讲)本地方法区 (和系统相关)寄存器 (给CPU使用)</code></pre><ol><li>代码块</li></ol><hr><pre><code>在Java中，使用{}括起来的代码被称为代码块，根据其位置和声明的不同，可以分为局部代码块，构造代码块，静态代码块，同步代码块。</code></pre><ol><li>方法的重写和重载    </li></ol><hr><pre><code>    方法的重载(overload)是根据函数的参数列表来决定的，即：参数列表的个数，类型，顺序三个方面    方法的重写(override)不仅根据函数的参数列表还要根据返回值类型，因为覆盖的方法的标志必须要和被覆盖的方法的标志完全匹配，才能达到覆盖的效果    重写方法必须满足下列条件        (1) 子类的方法的名称及参数必须和所覆盖的方法相同        (2) 子类的方法返回类型必须和所覆盖的方法相同        (3) 子类方法不能缩小所覆盖方法的访问权限        (4) 子类方法不能抛出比所覆盖方法更多的异常    重载方法必须满足下列条件        (1) 方法名必须相同        (2) 方法的参数签名必须相同        (3) 方法的返回类型和方法的修饰符可以不相同</code></pre><ol><li>private的是本身才可以被访问，不管extends还是implements都不可以访问。</li></ol><hr><pre><code>如果对外提供的话，必须对外提供一个public的方法，就像Set、get那样。</code></pre><ol><li>final修饰局部变量</li></ol><hr><pre><code>在方法内部，该变量不可以被改变在方法声明上，分别演示基本类型和引用类型作为参数的情况    基本类型，是值不能被改变    引用类型，是地址值不能被改变注意：局部内部类中使用局部变量，必须是被final修饰的</code></pre><ol><li>面向对象思想的体现：</li></ol><hr><pre><code>封装，继承和多态！</code></pre><ol><li>常用类</li></ol><hr><pre><code>1）Object类(java.lang)    public int hashCode()    public final Class getClass()    public String toString()    public boolean equals(Object?obj)        A:指示其他某个对象是否与此对象“相等”。         B:默认情况下比较的是对象的引用是否相同。        C:由于比较对象的引用没有意义，一般建议重写该方法。            a:手动重写            b:自动生成        D:==和equals()的区别。(面试题)    protected void finalize()        A:当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。        其实是调用的System.sc();方法。        B:主要针对堆内存    protected Object clone()2）Scanner类(java.util)    A:hasNextXxx()          判断是否还有下一个输入项,其中Xxx可以是Int,Double等。如果需要判断是否包含下一个字符串，则可以省略Xxx    B:nextXxx()          获取下一个输入项。Xxx的含义和上个方法中的Xxx相同    C:默认情况下，Scanner使用空格，回车等作为分隔符3）String类(java.lang)    public String()    public String(byte[] bytes)    public String(byte[] bytes,int offset,int length)    public String(char[] value)    public String(char[] value,int offset,int count)    public String(String original)    boolean equals(Object obj)    boolean equalsIgnoreCase(String str)    boolean contains(String str)    boolean startsWith(String str)    boolean endsWith(String str)    boolean isEmpty()    int length()    char charAt(int index)    int indexOf(int ch)    int indexOf(String str)    int indexOf(int ch,int fromIndex)    int indexOf(String str,int fromIndex)    String substring(int start)    String substring(int start,int end)    String replace(char old,char new)    String replace(String old,String new)    去除字符串两空格            String trim()    按字典顺序比较两个字符串          int compareTo(String str)        int compareToIgnoreCase(String str) 4）StringBuffer类（java.lang）    添加功能        public StringBuffer append(String str)        public StringBuffer insert(int offset,String str)    删除功能        public StringBuffer deleteCharAt(int index)        public StringBuffer delete(int start,int end)    替换功能        public StringBuffer replace(int start,int end,String str)    反转功能             public StringBuffer reverse()    截取功能(返回的是字符串，但是其本身并没有发生变化)        public String substring(int start)        public String substring(int start,int end)    String和StringBuffer的相互转换        (1)StringBuffer to String            String(StringBuffer sb);构造方法            StringBuffer的toString()方法        (2)String to StringBuffer            StringBuffer(String str);构造方法    ☆String,StringBuffer,StringBuilder的区别            String类表示内容不可改变的字符串。而StringBuffer类表示内容可以被修改的字符串。        当你知道字符数据要改变的时候你就可以使用StringBuffer。典型地，你可以使用StringBuffers        来动态构造字符数据。另外，String实现了equals方法，new String(“abc”).equals(new String(“abc”)        的结果为true,而StringBuffer没有实现equals方法，所以，new StringBuffer(“abc”)        .equals(new StringBuffer(“abc”)的结果为false。            StringBuffer和StringBuilder类都表示内容可以被修改的字符串，StringBuilder是线程不安全的，        运行效率高，如果一个字符串变量是在方法里面定义，这种情况只可能有一个线程访问它，不存在        不安全的因素了，则用StringBuilder。如果要在类里面定义成员变量，并且这个类的实例对象会在        多线程环境下使用，那么最好用StringBuffer。    ☆StringBuffer和数组的区别            数组是一种数据类型，一旦数组初始化完成，数组在内存中所占的空间就被固定下来，因此数组的长度        不可改变，即使把某个数组元素的数据清空，它所占的空间依然被保留，依然属于该数组，数组的长度        依然不变。StringBuffer的对象代表一个字符序列可变的字符串，可以调用StringBuffer提供的方法来        改变这个字符串。而且只能存放字符串，但是数组可以存放的类型就不限于字符串了。    ☆数据作为参数传递的问题            当方法传入的参数时基本数据类型时，（包括String）方法操作的是参数变量（也就是原型变量的一个值的拷贝）    改变的也只是原型变量的一个拷贝而已，而非变量本身。所以变量原型并不会随之改变。        但当方法传入的参数为非基本类型时（也就是说是一个对象类型的变量）， 方法改变参数变量的同时变量    原型也会随之改变5）Arrays类(java.util)    public static String toString(int[] a)    public static void sort(int[] a)    public static int binarySearch(int[] a,int key)6）Integer类(java.lang)    public int intValue()    public static int parseInt(String s)    public static String toString(int i)    public static Integer valueOf(int i)    public static Integer valueOf(String s)    ☆int类型和Integer类型的相互转换        A:int to Integer            Integer(int i );构造方法            intValue();        B:Integer to int            Integer.valueOf(int i);    ☆String类型和int类型的相互转换        A:String to int            Integer.parseInt(String s);        B:int to String            Integer.toString(int i);7）Character类(java.lang)    public static boolean isUpperCase(char ch)    public static boolean isLowerCase(char ch)    public static boolean isDigit(char ch)    public static char toUpperCase(char ch)    public static char toLowerCase(char ch8）Math类(java.lang)    public static int abs(int a)    public static double ceil(double a)    public static double floor(double a)    public static int max(int a,int b) //min    public static double pow(double a,double b)    public static double random()    public static int round(float a)     public static double sqrt(double a)9）Random类(java.util)    public Random()    public Random(long seed)    public int nextInt()    public int nextInt(int n)10）System类(java.lang)    public static void gc()    public static void exit(int status)    public static long currentTimeMillis()    public static void arraycopy(Object src,int srcPos,Object dest,int destPos,int length)            从指定源数组中复制一个数组，复制从指定的位置开始，到目标数组的指定位置结束。从 src         引用的源数组到 dest 引用的目标数组，数组组件的一个子序列被复制下来。被复制的组件的        编号等于 length 参数。源数组中位置在 srcPos 到 srcPos+length-1 之间的组件被分别复制        到目标数组中的 destPos 到 destPos+length-1 位置。11）BigInteger(java.math)    public BigInteger(String val)    public BigInteger add(BigInteger val)    public BigInteger subtract(BigInteger val)    public BigInteger multiply(BigInteger val)    public BigInteger divide(BigInteger val)    public BigInteger[] divideAndRemainder(BigInteger val)        返回包含 (this / val) 后跟 (this % val) 的两个 BigInteger 的数组。12）BigDecimal(java.math)    public BigDecimal(String val)    public BigDecimal add(BigDecimal augend)    public BigDecimal subtract(BigDecimal subtrahend)    public BigDecimal multiply(BigDecimal multiplicand)    public BigDecimal divide(BigDecimal divisor)    public BigDecimal divide(BigDecimal divisor,int scale,int roundingMode)13）Date类(java.util)    构造方法        public Date()        public Date(long date)    成员方法        public long getTime()        public void setTime(long time)    Date与String的相互转化        A:Date     --     String(格式化)            public final String format(Date date)        B:String -- Date(解析)            public Date parse(String source)        用法：            SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;);            String s = sdf.format(new Date());        //可以写为 String str = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;).format(new Date());            SimpleDateFormat sdf2 = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);            Date dd = sdf2.parse(&quot;2008-08-08 12:12:12&quot;);        //可以写为 Date d = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).parse(&quot;2008-08-08 12:12:12&quot;);14）DateFormat类(java.text)    public SimpleDateFormat()    public SimpleDateFormat(String pattern)    public final String format(Date date)    public Date parse(String source)15）Calendar类(java.util)    public static Calendar getInstance()    public int get(int field)    public void add(int field,int amount)    public final void set(int year,int month,int date)    field（常量）包括        DAY_OF_MONTH,DAY_OF_YEAR,DAY_OF_WEEK等等16）Runtime类(java.lang)    使应用程序能够与运行的环境相连接。    而且只有一个对象，不能创建自己的Runtime实例，其源码利用了单例模式中的饿汉模式。        方法：            exec(String command);//相当于是在控制台输入命令行            </code></pre><ol><li>正则表达式</li></ol><hr><pre><code>以下为String的方法：判断功能    public boolean matches(String regex)分割功能    public String[] split(String regex)替换功能    public String replaceAll(String regex,String replacement)获取功能    Pattern和Matcher类的使用        1：Pattern p = Pattren.compile(regex);        2：Matcher m = p.matcher(String s);        3：while(m.find()){System.out.println(m.group());}</code></pre><ol><li>集合和Map</li></ol><hr><pre><code>1).Collection(单列集合)    List(有序,可重复)        ArrayList            底层数据结构是数组,查询快,增删慢            线程不安全,效率高        Vector            底层数据结构是数组,查询快,增删慢            线程安全,效率低        LinkedList            底层数据结构是链表,查询慢,增删快            线程不安全,效率高    Set(无序,唯一)        HashSet            底层数据结构是哈希表。            哈希表依赖两个方法：hashCode()和equals()            执行顺序：                首先判断hashCode()值是否相同                    是：继续执行equals(),看其返回值                        是true:说明元素重复，不添加                        是false:就直接添加到集合                    否：就直接添加到集合            最终：                自动生成hashCode()和equals()即可            LinkedHashSet                底层数据结构由链表和哈希表组成。                由链表保证元素有序。                由哈希表保证元素唯一。        TreeSet            底层数据结构是红黑树。(是一种自平衡的二叉树)            如何保证元素唯一性呢?                根据比较的返回值是否是0来决定            如何保证元素的排序呢?                两种方式                    自然排序(元素具备比较性)                        让元素所属的类实现Comparable接口                    比较器排序(集合具备比较性)                        让集合接收一个Comparator的实现类对象Map(双列集合)    A:Map集合的数据结构仅仅针对键有效，与值无关。    B:存储的是键值对形式的元素，键唯一，值可重复。    HashMap        底层数据结构是哈希表。线程不安全，效率高            哈希表依赖两个方法：hashCode()和equals()            执行顺序：                首先判断hashCode()值是否相同                    是：继续执行equals(),看其返回值                        是true:说明元素重复，不添加                        是false:就直接添加到集合                    否：就直接添加到集合            最终：                自动生成hashCode()和equals()即可        LinkedHashMap            底层数据结构由链表和哈希表组成。                由链表保证元素有序。                由哈希表保证元素唯一。    Hashtable        底层数据结构是哈希表。线程安全，效率低            哈希表依赖两个方法：hashCode()和equals()            执行顺序：                首先判断hashCode()值是否相同                    是：继续执行equals(),看其返回值                        是true:说明元素重复，不添加                        是false:就直接添加到集合                    否：就直接添加到集合            最终：                自动生成hashCode()和equals()即可        Properties            是一种直接将Map写入store或者读出load文件的数据结构            1).Properties的特殊功能                public Object setProperty(String key,String value)                public String getProperty(String key)                public Set&lt;String&gt; stringPropertyNames()            2).Properties和IO流的结合使用                public void load(Reader reader)                public void store(Writer writer,String comments)    TreeMap        底层数据结构是红黑树。(是一种自平衡的二叉树)            如何保证元素唯一性呢?                根据比较的返回值是否是0来决定            如何保证元素的排序呢?                两种方式                    自然排序(元素具备比较性)                        让元素所属的类实现Comparable接口                    比较器排序(集合具备比较性)                        让集合接收一个Comparator的实现类对象2)到底使用那种集合看需求。是否是键值对象形式:    是：Map        键是否需要排序:            是：TreeMap            否：HashMap        不知道，就使用HashMap。    否：Collection        元素是否唯一:            是：Set                元素是否需要排序:                    是：TreeSet                    否：HashSet                不知道，就使用HashSet            否：List                要安全吗:                    是：Vector(其实我们也不用它,后面我们讲解了多线程以后，我在给你回顾用谁)                    否：ArrayList或者LinkedList                        增删多：LinkedList                        查询多：ArrayList                    不知道，就使用ArrayList        不知道，就使用ArrayList3)集合的常见方法及遍历方式    Collection:        add()        remove()        contains()        iterator()        size()        遍历：            增强for            迭代器                Iterator it = Collection.itretor();                while(it.hasnext()){                    it.next;                }        |--List            get()            遍历：                普通for        |--Set    Map:        put()        remove()        containskey(),containsValue()        keySet()        get()        value()        entrySet()        size()        遍历：            根据键找值            根据键值对对象分别找键和值</code></pre><ol><li>泛型</li></ol><hr><pre><code>1： 泛型是一种特殊的类型，它把指定类型的工作推迟到客户端代码声明并实例化类或方法的时候进行。    也被称为参数化类型，可以把类型当作参数一样传递过来，在传递过来之前我不明确，但是在使用的时候我就用明确了。2： 泛型的好处    A:提高了程序的安全性    B:将运行期遇到的问题转移到了编译期    C:省去了类型强转的麻烦</code></pre><ol><li>异常</li></ol><hr><pre><code>    Java中的异常被分为两大类：编译时异常和运行时异常。所有的RuntimeException类及其子类的实例被称为运行时异常，其他的异常就是编译时异常    常见的RuntimeException： IndexOutOfBoundsException，EmptyStackException,ProfileDataException        SecurityException, SystemException, IllegalPathStateException, IllegalStateException....</code></pre><ol><li>File类（java.io）</li></ol><hr><pre><code>1).构造方法    public File(String pathname)    public File(String parent,String child)    public File(File parent,String child)2).创建功能    public boolean createNewFile()    public boolean mkdir()    public boolean mkdirs()3).删除功能    public boolean delete()4).重命名功能    public boolean renameTo(File dest)5).判断功能    public boolean isDirectory()    public boolean isFile()    public boolean exists()    public boolean canRead()    public boolean canWrite()    public boolean isHidden()6).基本获取功能    public String getAbsolutePath()    public String getPath()    public String getName()    public long length()    public long lastModified()7).高级获取功能    public String[] list()    public File[] listFiles()</code></pre><ol><li>IO流(java.io)</li></ol><hr><pre><code>1].字节流    输入InputStream        FileInputStream            构造方法：                FileInputStream(File file)                FileInputStream(String name)            读数据方法：                public int read()                public int read(byte[] b)        FilterInputStream            BufferedInputStream    输出OutputStream        FileOutputStream            构造方法：                FileOutputStream(File file)                FileOutputStream(String name)            写数据方式：                public void write(int b)                public void write(byte[] b)                public void write(byte[] b,int off,int len)        FilterOutputStream            BufferedOutputStream2].字符流(注意其和Properties的结合使用)    输入Reader        BufferedReader(高效字符输入流)            BufferedReader(Reader in)            特殊功能：                String readLine();        InputStreamReader(转换流)            构造方法：                 public InputStreamReader(InputStream in)                public InputStreamReader(InputStream in,String charsetName)            读数据方法：                public int read()                public int read(char[] cbuf)            FileReader    输出Writer        BufferedWriter(高效字符输出流)            BufferedWriter(Writer out)            特殊功能：                void newLine();        OutputStreamWriter(转换流)            构造方法：                public OutputStreamWriter(OutputStream out)                public OutputStreamWriter(OutputStream out,String charsetName)            写数据方法：                public void write(int c)                public void write(char[] cbuf)                public void write(char[] cbuf,int off,int len)                public void write(String str)                public void write(String str,int off,int len)            FileWriter3].标准输入输出流    1).System类中的字段in：    类型是InputStream;        BufferedReader bis = new BufferedReader(new InputStreamReader(System.in));    2).System类中的字段out：    类型是PrintStream;(OutputStream-FilterOutputStream)        其中的println()方法相当于write();+newLine();+flush();4].RandomAccessFile随机方位流        RandomAccessFile(File file,&quot;rw&quot;);,其中&quot;rw&quot;表示可读可写5].ObjectOutputStream,ObjectInputStream序列化流</code></pre><ol><li>JDK7要了解的新IO类</li></ol><hr><pre><code>    新IO和传统的IO有相同的目的，都是用于进行输入输出的，但新IO使用了不同的方式来处理输入输出，采用内存映射文件的方式，将文件或者文件的一段区域映射到内存中，就可以像访问内存一样的来访问文件了，这种方式效率比旧IO要高很多.Path:与平台无关的路径。Paths:包含了返回Path的静态方法。        public static Path get(URI uri):根据给定的URI来确定文件路径。Files:操作文件的工具类。提供了大量的方法，简单了解如下方法        public static long copy(Path source, OutputStream out) :复制文件        public static Path write(Path path, Iterable&lt;  extends CharSequence&gt; lines, Charset cs, OpenOption... options):            把集合的数据写到文件。    //复制文件Files.copy(Paths.get(&quot;Demo.java&quot;), new FileOutputStream(&quot;Copy.Java&quot;));    //把集合中的数据写到文件    List&lt;String&gt; list = new ArrayList&lt;String&gt;();    list.add(&quot;hello&quot;);    list.add(&quot;world&quot;);    list.add(&quot;java&quot;);Files.write(Paths.get(&quot;list.txt&quot;), list, Charset.forName(&quot;gbk&quot;));Charset类(java.nio)    16 位的 Unicode 代码单元序列和字节序列之间的指定映射关系。此类定义了用于创建解码器    和编码器以及获取与 charset 关联的各种名称的方法</code></pre><ol><li>多线程</li></ol><hr><pre><code>Thread类(java.lang)Runnable接口(java.lang)1].线程安全问题的产生条件：    A:是否是多线程环境             B:是否有共享数据             C:是否有多条语句操作共享数据    2].线程组    构造方法：        ThreadGroup(String name)        ThreadGroup(ThreadGroup parent,String name)    常用方法：        getName();        isDaemon();//测试是否为一个后台程序线程组        setDaemon(boolean daemon);//如果为true，则将此线程组设置为后台线程组3].线程池    类：    Executors(java.util.concurrent)    接口：    ExecutorService(java.util.concurrent)        他没有构造方法，因此要用Executors类中的newFixedThreadPool()方法来得到线程池    实现线程的代码呢?     A:创建一个线程池对象，控制要创建几个线程对象。         public static ExecutorService newFixedThreadPool(int nThreads)     B:这种线程池的线程可以执行：         可以执行Runnable对象或者Callable对象代表的线程         做一个类实现Runnable接口。    C:调用如下方法即可        Future&lt;?&gt; submit(Runnable task)//开启一个线程实现Runable接口的线程        &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task)    D:我就要结束，可以吗?        可以。shutdown();4].Callable&lt;T&gt;接口(java.util.concurrent)    实现多线程的方式3，其实现依靠call()方法，且有返回值类型和泛型类型一致。5].定时器    定时器：可以让我们在指定的时间做某件事情，还可以重复的做某件事情。        依赖Timer和TimerTask这两个类：(java.util)    Timer:定时        public Timer()        public void schedule(TimerTask task,long delay)        public void schedule(TimerTask task,long delay,long period)        public void cancel()    TimerTask:任务(继承了Runable接口！)        其中run()方法中即是计数器任务要执行的操作。        cancel()表示取消这个任务，否则这个程序不会停下来。    实现方式，        Timer t = new Timer();        t.schedule(TimerTask tt,long time);//表示一段延时之后执行某个线程任务6].多线程的生命周期    建立        -start()-就绪    就绪        -执行权-运行    运行        -失去执行权-就绪        -sleep(),join(),IO,synchronized,wait-阻塞        -run()-死亡        阻塞            -notify(),锁可用,sleep()时间到,join()线程完毕,IO完毕-就绪    死亡7].线程的方法    1.yield让出cpu    2.setPriority()设置线程的优先级8].线程之间的通信    1).什么时候需要通信        多个线程并发执行时, 在默认情况下CPU是随机切换线程的        如果我们希望他们有规律的执行, 就可以使用通信, 例如每个线程执行一次打印    2).怎么通信        如果希望线程等待, 就调用wait()        如果希望唤醒等待的线程, 就调用notify();        这两个方法必须在同步代码中执行, 并且使用同步锁对象来调用    3).多个线程通信的问题        notify()方法是随机唤醒一个线程        notifyAll()方法是唤醒所有线程        JDK5之前无法唤醒指定的一个线程        如果多个线程之间通信, 需要使用notifyAll()通知所有线程, 用while来反复判断条件9].JDK5之后的线程控制    1).同步        使用ReentrantLock类的lock()和unlock()方法进行同步    2).通信        使用ReentrantLock类的newCondition()方法可以获取Condition对象        需要等待的时候使用Condition的await()方法, 唤醒的时候用signal()方法        不同的线程使用不同的Condition, 这样就能区分唤醒的时候找哪个线程了</code></pre><ol><li>GUI</li></ol><hr><pre><code>1].Graphical User Interface    java.Awt: Abstract Window ToolKit    java.Swing:完全由java实现，增强了可移植性，属于轻量级控件。2].事件监听    A:事件源    事件发生的地方    B:事件    就是要发生的事情    C:事件处理    就是针对发生的事情做出的处理方案    D:事件监听 就是把事件源和事件关联起来3].TextFiled事件监听4].内部类5].Graphics类6].鼠标事件适配器7].window事件8].键盘响应事件</code></pre><ol><li>网络编程</li></ol><hr><pre><code>1]网络模型        1). 物理层：主要定义物理设备标准，如网线的接口类型、光纤的    接口类型、各种传输介质的传输速率等。它的主要作用是传输比特流（就是由1、0    转化为电流强弱来进行传输,到达目的地后在转化为1、0，也就是我们常说的数    模转换与模数转换）。这一层的数据叫做比特。         2). 数据链路层：主要将从物理层接收的数据进行MAC地址（网卡的地址）的封    装与解封装。常把这一层的数据叫做帧。在这一层工作的设备是交换机，数据    通过交换机来传输。         3). 网络层：主要将从下层接收到的数据进行IP地址（例192.168.0.1)的封装    与解封装。在这一层工作的设备是路由器，常把这一层的数据叫做数据包。         4). 传输层：定义了一些传输数据的协议和端口号（WWW端口80等），如：TCP    （传输控制协议，传输效率低，可靠性强，用于传输可靠性要求高，数据量大    的数据），UDP（用户数据报协议，与TCP特性恰恰相反，用于传输可靠性要求    不高，数据量小的数据，如QQ聊天数据就是通过这种方式传输的）。 主要是将    从下层接收的数据进行分段和传输，到达目的地址后再进行重组。常常把这一    层数据叫做段。         5). 会话层：通过传输层（端口号：传输端口与接收端口）建立数据传输的通    路。主要在你的系统之间发起会话或者接受会话请求（设备之间需要互相认识    可以是IP也可以是MAC或者是主机名）         6). 表示层：主要是进行对接收的数据进行解释、加密与解密、压缩与解压缩    等（也就是把计算机能够识别的东西转换成人能够能识别的东西（如图片、声音等）。         7). 应用层： 主要是一些终端的应用，比如说FTP（各种文件下载），WEB（IE浏览）    ，QQ之类的（可以把它理解成我们在电脑屏幕上可以看到的东西．就是终端应用）。2].网络通信三要素    IP地址:InetAddress        网络中设备的标识，不易记忆，可用主机名    端口号        用于标识进程的逻辑地址，不同进程的标识    传输协议        通讯的规则        常见协议：TCP，UDP3].IP地址，InetAddress类(java.net)        要想让网络中的计算机能够互相通信，必须为每台计算机指定一个标识号，通过这个    标识号来指定要接受数据的计算机和识别发送的计算机，在TCP/IP协议中，这个标识号就是IP地址    IP地址 = 网络号码+主机地址        A类IP地址:第一段号码为网络号码，剩下的三段号码为本地计算机的号码        B类IP地址:前二段号码为网络号码，剩下的二段号码为本地计算机的号码        C类IP地址:前三段号码为网络号码，剩下的一段号码为本地计算机的号码    特殊地址:        127.0.0.1 回环地址,可用于测试本机的网络是否有问题. ping 127.0.0.1           DOS命令 ipconfig:查看本机IP地址        xxx.xxx.xxx.0 网络地址        xxx.xxx.xxx.255 广播地址4].端口    A:每个网络程序都会至少有一个逻辑端口    B:用于标识进程的逻辑地址，不同进程的标识    C:有效端口：0~65535， 其中0~1024 系统使用或保留端口。5].协议    A:UDP        将数据源和目的封装成数据包中，不需要建立连接；每个数据报的大小在限制在64k；因无连接，    是不可靠协议；不需要建立连接，速度快    B:TCP        建立连接，形成传输数据的通道；在连接中进行大数据量传输；通过三次握手完成连接，是可靠    协议；必须建立连接，效率会稍低6].Socket套接字    Socket套接字：        网络上具有唯一标识的IP地址和端口号组合在一起才能构成唯一能识别的标识符套接字。    Socket原理机制：        通信的两端都有Socket。        网络通信其实就是Socket间的通信。        数据在两个Socket间通过IO传输。7].UDP传输    UDP发送端的步骤：         * 1. 构建发送端的Socket对象                DatagramSocket ds = new DatagramSocket();         * 2. 创建数据，并把数据打包                String s = ??;//是要发送的数据                byte[] bys = s.getBytes();                DatagramPacket dp = new DatagramPacket(bys,bys.length,InetAddress.getLocalHost(),port);         * 3. 调用Socket对象的发送方法发送数据包                ds.send(dp);         * 4. 释放资源                ds.close();    UDP协议接收数据：         * A:创建接收端Socket对象                DatagramSocket ds = new DatagramSocket(port);         * B:创建一个数据包(接收容器)                byte[] bys = new byte[1024];         * C:调用Socket对象的接收方法接收数据                DatagramPacket dp = new DatagramPacket(bys,bys.length);         * D:解析数据包，并显示在控制台                ds.receive(dp);                String s = new String(dp.getData,0,dp.getLength());         * E:释放资源                    ds.close();8].TCP传输    1.客户端        A:创建Socket连接服务端(指定ip地址,端口号)通过ip地址找对应的服务器            Socket s = new Socket(InetAddress.getLocalHost(),port);        B:调用Socket的getInputStream()和getOutputStream()方法获取和服务端相连的IO流            BufferedReader br = new BufferedReader(new InputStreamReader(System.in))            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));        C:输入流可以读取服务端输出流写出的数据            for(String s = null;(s = br.readLine())!=null;){                bw.write(s);                bw.newLine();                bw.flush();            }        D:输出流可以写出数据到服务端的输入流            br.close();            bw.close();    2.服务端        A:创建ServerSocket(需要指定端口号)            ServerSocket ss= new SocketServer(port);        B:调用ServerSocket的accept()方法接收一个客户端请求，得到一个Socket            Socket s = ss.accept();        C:调用Socket的getInputStream()和getOutputStream()方法获取和客户端相连的IO流            BufferedReader br = new BufferedReader(new InputStreamReader(s.getInputStream));        D:输入流可以读取客户端输出流写出的数据            for(String sss= null;(sss = br.readLine())!=null;){                System.out.println(sss);            }        E:释放资源            br.close();</code></pre><ol><li>类加载器和反射</li></ol><hr><pre><code>1].类加载器    当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过加载，连接，初始化三步来实现对这个类进行初始化。    加载         就是指将class文件读入内存，并为之创建一个Class对象。        任何类被使用时系统都会建立一个Class对象。    连接        验证 是否有正确的内部结构，并和其他类协调一致        准备 负责为类的静态成员分配内存，并设置默认初始化值        解析 将类的二进制数据中的符号引用替换为直接引用    初始化         ☆类的初始化时机            a.创建类的实例            b.访问类的静态变量，或者为静态变量赋值            c.调用类的静态方法            d.使用反射方式来强制创建某个类或接口对应的java.lang.Class对象            e.初始化某个类的子类            f.直接使用java.exe命令来运行某个主类2].类加载器的作用    Bootstrap ClassLoader 根类加载器        也被称为引导类加载器，负责Java核心类的加载            比如System,String等。在JDK中JRE的lib目录下rt.jar文件中    Extension ClassLoader 扩展类加载器        负责JRE的扩展目录中jar包的加载。            在JDK中JRE的lib目录下ext目录    Sysetm ClassLoader 系统类加载器        负责在JVM启动时加载来自java命令的class文件，以及classpath环境变量所指定的jar包和类路径3].反射    Class(java.lang)        JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；    对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态    调用对象的方法的功能称为java语言的反射机制。        要想解剖一个类,必须先要获取到该类的字节码文件对象。而解剖使用的就是Class类中    的方法.所以先要获取到每一个字节码文件对应的Class类型的对象.    1).    获取构造方法        Constructor&lt;T&gt;(java.lang.reflect)             Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)               Constructor&lt;?&gt;[] getConstructors()         创建对象            T newInstance(Object... initargs) //initargs是构造参数类型的字节码文件，如String.class,int.class    2).获取所有成员            getFields,getDeclaredFields        获取单个成员            getField,getDeclaredField        修改成员的值            set(Object obj,Object value)//将指定对象变量上此 Field 对象表示的字段设置为指定的新值。    3).获取所有方法            getMethods            getDeclaredMethods        获取单个方法            getMethod            getDeclaredMethod        暴力访问            Method.setAccessible(true);4].动态代理    a.在Java中java.lang.reflect包下提供了一个Proxy类和一个InvocationHandler接口，通过使用        这个类和接口就可以生成动态代理对象。JDK提供的代理只能针对接口做代理。我们有更强大的代理cglib    b.Proxy类中的方法创建动态代理类对象        public static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)        最终会调用InvocationHandler的方法    c.InvocationHandler        Object invoke(Object proxy,Method method,Object[] args)</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt; ：java学习笔记&lt;br&gt;
    
    </summary>
    
      <category term="coding" scheme="http://yoursite.com/categories/coding/"/>
    
    
      <category term="notes" scheme="http://yoursite.com/tags/notes/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
</feed>
